name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    env:
      NEXT_PUBLIC_ENVIRONMENT_LABEL: CI
      NEXT_PUBLIC_BACKEND_URL: http://localhost:3000/api
      NEXT_PUBLIC_SUPABASE_URL: https://ci.example.supabase.co
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ci-anon-key
      NEXT_PUBLIC_ONBOARDING_PUBLIC_TOKEN: ci-onboarding-token
      SUPABASE_SERVICE_ROLE_KEY: ci-service-role
      SITE_SUPABASE_URL: https://ci.example.com
      SITE_SUPABASE_SECRET_KEY: ci-site-secret
      ONBOARDING_API_TOKEN: ci-onboarding-token
      OPENAI_API_KEY: ci-openai-key
      TEST_REDIS_URL: redis://127.0.0.1:6379/15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Use npm@11.4.2
        run: npm i -g npm@11.4.2

      - name: Print Node and npm versions
        run: |
          node -v
          npm -v

      - name: Install dependencies
        run: |
          npm ci || {
            echo "npm ci failed; attempting npm install for diagnostics"
            npm install
            exit 1
          }

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Test
        run: npm test

      - name: Preflight (env + backend + build)
        run: node scripts/preflight.mjs
        env:
          PREFLIGHT_ALLOW_MISSING_ENV: '1'

      - name: Install backend deps
        working-directory: backend
        run: npm ci

      - name: Backend env check (production vars present)
        working-directory: backend
        env:
          DATABASE_URL: postgresql://user:pass@localhost:5432/db
          DATABASE_SHADOW_URL: postgresql://user:pass@localhost:5432/db_shadow
          REDIS_URL: redis://localhost:6379
          CORS_ORIGIN: http://localhost:3000
          METRICS_TOKEN: test-token
          ADMIN_SESSION_SECRET: test-admin-secret
          FAN_SESSION_SECRET: test-fan-secret
        run: npm run env:check

      # Uncomment to run Playwright e2e once e2e mocks or backend are available
      # E2E smoke tests with mocked API (guarded by E2E_API_MOCKS)
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run admin smoke tests (admin + SMS)
        env:
          E2E_API_MOCKS: '1'
          NEXT_PUBLIC_BACKEND_URL: 'http://localhost:3000/api/e2e'
          NEXT_PUBLIC_SUPABASE_URL: 'http://localhost:54321'
          NEXT_PUBLIC_SUPABASE_ANON_KEY: 'test'
          SUPABASE_SERVICE_ROLE_KEY: 'test'
          PORT: '3000'
        run: npx playwright test tests/e2e/admin-smokes.spec.ts tests/e2e/admin/admin-sms*.spec.ts
      - name: Run accessibility smoke tests
        env:
          E2E_API_MOCKS: '1'
          NEXT_PUBLIC_BACKEND_URL: 'http://localhost:3000/api/e2e'
        run: npm run test:e2e:a11y
      - name: Upload Playwright artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            playwright-report
            test-results
