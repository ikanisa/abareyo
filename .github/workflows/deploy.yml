name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    env:
      NODE_ENV: production
      # Required secrets must be configured in repo or environment
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DATABASE_SHADOW_URL: ${{ secrets.DATABASE_SHADOW_URL }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
      METRICS_TOKEN: ${{ secrets.METRICS_TOKEN }}
      ADMIN_SESSION_SECRET: ${{ secrets.ADMIN_SESSION_SECRET }}
      FAN_SESSION_SECRET: ${{ secrets.FAN_SESSION_SECRET }}
      HEALTH_URL: ${{ secrets.HEALTH_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend deps
        working-directory: backend
        run: npm ci

      - name: Prisma generate
        working-directory: backend
        run: npx prisma generate

      - name: Run DB migrations (deploy)
        working-directory: backend
        run: npm run prisma:migrate

      - name: Prisma migrate status (post-deploy)
        working-directory: backend
        run: |
          npx prisma -v
          npx prisma migrate status || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-frontend:latest
            ghcr.io/${{ github.repository }}-frontend:${{ github.sha }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-backend:latest
            ghcr.io/${{ github.repository }}-backend:${{ github.sha }}

      - name: Setup kubectl (optional)
        if: secrets.KUBE_CONFIG_B64 != ''
        uses: azure/setup-kubectl@v4

      - name: Configure kubeconfig (optional)
        if: secrets.KUBE_CONFIG_B64 != ''
        run: |
          mkdir -p "$HOME/.kube"
          echo "${KUBE_CONFIG_B64}" | base64 -d > "$HOME/.kube/config"
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}

      - name: Create GHCR imagePullSecret (optional)
        if: secrets.KUBE_CONFIG_B64 != '' && secrets.GHCR_TOKEN != ''
        run: |
          kubectl -n rayon create secret docker-registry ghcr \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n rayon patch serviceaccount default --type merge -p '{"imagePullSecrets":[{"name":"ghcr"}]}' || true

      - name: Apply Kubernetes manifests (optional)
        if: secrets.KUBE_CONFIG_B64 != ''
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml

      - name: Set images to current SHA (optional)
        if: secrets.KUBE_CONFIG_B64 != ''
        run: |
          kubectl -n rayon set image deployment/backend backend=ghcr.io/${{ github.repository }}-backend:${{ github.sha }} --record=true || true
          kubectl -n rayon set image deployment/frontend frontend=ghcr.io/${{ github.repository }}-frontend:${{ github.sha }} --record=true || true
          kubectl -n rayon rollout status deployment/backend --timeout=180s || true
          kubectl -n rayon rollout status deployment/frontend --timeout=180s || true
          kubectl -n rayon get pods -o wide

      - name: In-cluster health check (optional)
        if: secrets.KUBE_CONFIG_B64 != '' && env.HEALTH_URL == ''
        run: |
          kubectl -n rayon run curl --image=curlimages/curl:8.8.0 -i --rm --restart=Never -- \
            sh -lc 'curl -fsS http://backend:5000/api/health || exit 1' || true

      - name: Health check (optional)
        if: env.HEALTH_URL != ''
        run: |
          echo "Hitting $HEALTH_URL ..."
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL") || true
            if [ "$STATUS" = "200" ]; then
              echo "Health OK"
              exit 0
            fi
            echo "Health not ready (status=$STATUS), retry $i/10"
            sleep 5
          done
          echo "Health check failed"
          exit 1
