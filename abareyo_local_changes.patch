diff --git a/README.md b/README.md
index 0625788..3c25b52 100644
--- a/README.md
+++ b/README.md
@@ -1,68 +1,62 @@
 # Rayon Sports Digital Platform
 
-This monorepo powers the Rayon Sports fan experience across web, mobile, and match operations. The current iteration delivers the Phase 1 foundation: a Next.js App Router frontend, a NestJS 11 backend scaffold, shared TypeScript contracts, and automation for CI/CD and containerised development.
+This monorepo powers the Rayon Sports fan experience across web, mobile, and match operations. The current MVP is a mobile-first Next.js PWA that reads and writes to Supabase for ticketing, retail, insurance, and SACCO services while remaining payment-first via USSD/SMS confirmations.
 
 ## Stack at a Glance
-- **Frontend**: Next.js 14 (App Router), Tailwind CSS, shadcn/ui, TanStack Query, next-themes, Socket.IO client for realtime toasts.
-- **Backend**: NestJS 11 + Fastify, Prisma ORM, PostgreSQL, Redis, BullMQ (queued jobs), OpenAI integrations, Socket.IO gateway.
-- **Shared packages**: `packages/contracts` distributes request/response DTOs used by the app and API.
-- **Tooling**: Dockerfiles for web + services, GitHub Actions CI (`npm run lint`, `npm run type-check`, `npm run build`).
+- **Frontend**: Next.js 14 (App Router), Tailwind CSS, shadcn/ui, TanStack Query, next-themes, Framer Motion.
+- **Backend**: Supabase Postgres (SQL migrations + seeds), Supabase Edge Functions, and Next.js API routes backed by `@supabase/supabase-js`.
+- **Realtime automation**: `/functions/v1/sms-webhook` reconciles MoMo/Airtel SMS receipts while `/functions/v1/issue-policy` turns paid insurance quotes into policies.
+- **Tooling**: Dockerfiles for web, GitHub Actions CI (`npm run lint`, `npm run type-check`, `npm run build`), Supabase CLI helpers.
+
+## Required Environment Variables
+
+Create a root `.env` file with the following values. Keys prefixed with `NEXT_PUBLIC_` are exposed to the browser and should point at the deployed backend/API origin.
+
+```
+SUPABASE_URL=
+SUPABASE_ANON_KEY=
+SUPABASE_SERVICE_ROLE_KEY=
+SUPABASE_PROJECT_REF=
+SMS_WEBHOOK_TOKEN=
+NEXT_PUBLIC_BACKEND_URL=http://localhost:3000
+NEXT_PUBLIC_ENVIRONMENT_LABEL=local
+```
 
 ## Local Setup
 1. Install dependencies:
    ```bash
    npm install
-   (cd backend && npm install)
    ```
-2. Copy backend environment defaults and tweak as needed:
+2. Ensure the Supabase CLI is installed (<https://supabase.com/docs/guides/cli>). Log in once so migrations can run.
+3. Start Supabase locally (or point the env vars to a remote project):
    ```bash
-   cp backend/.env.example backend/.env
-   ```
-3. Create a root `.env` for the Next.js app (keys prefixed with `NEXT_PUBLIC_` are exposed to the browser):
+   supabase start
    ```
-   NEXT_PUBLIC_BACKEND_URL=http://localhost:5000/api
-   NEXT_PUBLIC_ADMIN_API_TOKEN=admin-dev-token
-   ```
-4. Start supporting services (Postgres, Redis) via Docker Compose or local installs. A minimal compose file is provided:
+   The CLI prints credentials that can be copied into `.env` for local development.
+4. Apply the MVP schema and seed data:
    ```bash
-   docker compose up db redis -d
+   supabase migration up
+   supabase db seed
    ```
-5. Apply Prisma schema and seed the database:
+5. Deploy or emulate Edge Functions if you plan to test payment automation locally:
    ```bash
-   cd backend
-   npm run prisma:generate
-   npm run prisma:dev
-   npm run seed
+   supabase functions serve sms-webhook --env-file .env
+   supabase functions serve issue-policy --env-file .env
    ```
-6. Run the backend and frontend in separate terminals:
+   These functions can also be deployed via `supabase functions deploy <name>`.
+6. Run the Next.js dev server:
    ```bash
-   # backend
-   cd backend
-   npm run start:dev
-
-   # frontend
    npm run dev
    ```
    Visit <http://localhost:3000> to explore the mobile-first PWA.
 
-Realtime events (ticket confirmations, gate scans, etc.) stream over Socket.IO at `<backend>/ws`. The UI already listens and surfaces toasts for the most common signals.
-
-If you plan to surface media (shop products, fundraising covers), configure S3-compatible storage in `backend/.env`:
-
-```
-S3_ENDPOINT=http://127.0.0.1:9000
-S3_BUCKET=rayon-dev
-S3_REGION=us-east-1
-S3_ACCESS_KEY_ID=minio
-S3_SECRET_ACCESS_KEY=miniostorage
-S3_PUBLIC_BASE_URL=http://127.0.0.1:9000/rayon-dev
-```
+Realtime payment confirmations are delivered through the SMS webhook. Use `node tools/gsm-emulator/send-sms.js "Paid RWF 25000 Ref XYZ"` or call the deployed `/functions/v1/sms-webhook` endpoint with an authorised payload to mark tickets, orders, quotes, and SACCO deposits as paid.
 
-In development, you can run a local MinIO instance and point the `S3_PUBLIC_BASE_URL` at its HTTP endpoint so the frontend receives fully-qualified image URLs.
+If you plan to surface media (shop products, fundraising covers), configure S3-compatible storage in the Supabase project storage bucket or an external CDN and update product image URLs accordingly.
 
 ### Chat-Based Onboarding
 - Visit `/onboarding` to launch the anonymous, ChatGPT-style onboarding assistant.
-- The backend requires `OPENAI_API_KEY` and optionally `OPENAI_ONBOARDING_MODEL` (defaults to `gpt-4.1-mini`) in `backend/.env` to call the OpenAI Responses API.
+- Set `OPENAI_API_KEY` in `.env` if you want to use the hosted onboarding agent locally.
 - The agent stores each fan's WhatsApp and MoMo numbers, linking them to the guest profile for future payments.
 - Once onboarding is completed, the app automatically unlocks the regular `/` home experience.
 
@@ -80,23 +74,25 @@ In development, you can run a local MinIO instance and point the `S3_PUBLIC_BASE
 - `app/` – Next.js route tree (`/(routes)` encloses mobile navigation, `/admin/*` hosts internal consoles).
 - `src/views/` – Client components powering screens referenced by routes.
 - `src/providers/` – Global context providers (auth façade, i18n scaffold, theme provider, React Query).
-- `backend/` – NestJS application (modules for tickets, payments, wallet, community, fundraising, SMS processing).
-- `packages/contracts/` – Shared DTOs and enums consumed by frontend and backend.
+- `backend/` – Legacy NestJS application retained for reference. The Supabase-backed flows now live in `app/api` and `supabase/`.
+- `packages/contracts/` – Shared DTOs and enums consumed by frontend utilities and any remaining backend tooling.
 - `docs/` – Architecture decisions, local runbooks, and mobile packaging guides.
 
 ## Next Steps (Production Readiness)
 
 - Migrations & Seed
-  - See `docs/migrations.md` and run `make backend-migrate` then `make backend-seed`.
+  - Review `docs/migrations.md` for Supabase workflow tips.
+  - Promote SQL via `supabase db push` in CI/CD or run `supabase migration up` + `supabase db seed` in production environments.
 
 - Envs & Secrets
   - Confirm required envs in `docs/production-env.md`. Validate with `make env-check`.
+  - Ensure Supabase service role keys are stored as repo/infra secrets, never shipped to the browser.
 
 - E2E Smokes
   - `make e2e` runs Playwright smokes with mocked API (guarded by `E2E_API_MOCKS=1`).
 
 - CI/CD
-  - CI runs lint/unit/e2e. Deploy workflow builds/pushes images (GHCR) and runs Prisma migrate deploy.
+  - CI runs lint/unit/build. Preview deploys rely on Vercel + Supabase. Edge Functions ship via `.github/workflows/supabase-functions-deploy.yml`.
   - Optional `HEALTH_URL` secret enables post-deploy health check loop.
 
 - Observability & Security
diff --git a/app/(routes)/matches/page.tsx b/app/(routes)/matches/page.tsx
index d902a0d..586e836 100644
--- a/app/(routes)/matches/page.tsx
+++ b/app/(routes)/matches/page.tsx
@@ -1,8 +1,2 @@
-import { buildRouteMetadata } from "@/app/_lib/navigation";
-import MatchesView from "@/views/MatchesView";
-
-export const metadata = buildRouteMetadata("/matches");
-
-const MatchesPage = () => <MatchesView />;
-
-export default MatchesPage;
+export { metadata } from "@/app/matches/page";
+export { default } from "@/app/matches/page";
diff --git a/app/(routes)/shop/ShopClientPage.tsx b/app/(routes)/shop/ShopClientPage.tsx
index 699d23a..c4bf909 100644
--- a/app/(routes)/shop/ShopClientPage.tsx
+++ b/app/(routes)/shop/ShopClientPage.tsx
@@ -19,13 +19,14 @@ import ProductGrid from "./_components/ProductGrid";
 import ProductRail from "./_components/ProductRail";
 import TrustBanner from "./_components/TrustBanner";
 import ShopOnboarding from "./_components/ShopOnboarding";
+// Pull prop types explicitly so that dynamic imports retain type safety.
 import type { FilterSheetProps } from "./_components/FilterSheet";
 import type { SortSheetProps } from "./_components/SortSheet";
 import { SHOP_TABS, useCart, useCatalog } from "./_logic/useShop";
 import { ShopLocaleProvider, useShopLocale, type ShopLocale } from "./_hooks/useShopLocale";
-import type { FilterSheetProps } from "./_components/FilterSheet";
-import type { SortSheetProps } from "./_components/SortSheet";
 
+// Provide explicit generic types for the dynamic imports.  Without this, type inference
+// falls back to `any` and prop hints are lost.
 const FilterSheet = dynamic<FilterSheetProps>(
   () => import("./_components/FilterSheet").then((mod) => mod.default),
   { ssr: false },
diff --git a/app/(routes)/shop/[slug]/PdpClientPage.tsx b/app/(routes)/shop/[slug]/PdpClientPage.tsx
index b6bcc93..2cc0f5b 100644
--- a/app/(routes)/shop/[slug]/PdpClientPage.tsx
+++ b/app/(routes)/shop/[slug]/PdpClientPage.tsx
@@ -9,10 +9,10 @@ import UssdPayButton from "../_components/UssdPayButton";
 import VariantSelector from "../_components/VariantSelector";
 import ProductRail from "../_components/ProductRail";
 import type { SizeGuideModalProps } from "../_components/SizeGuideModal";
+// Explicitly import the modal prop type once for type safety on dynamic import
 import type { Product } from "../_data/products";
 import { formatPrice, getCrossSell, recordRecentlyViewed, useCart, useRecentlyViewed } from "../_logic/useShop";
 import { ShopLocaleProvider, useShopLocale, type ShopLocale } from "../_hooks/useShopLocale";
-import type { SizeGuideModalProps } from "../_components/SizeGuideModal";
 
 const SizeGuideModal = dynamic<SizeGuideModalProps>(
   () => import("../_components/SizeGuideModal").then((mod) => mod.default),
diff --git a/app/(routes)/shop/_components/ActiveFilters.tsx b/app/(routes)/shop/_components/ActiveFilters.tsx
index 25a0bc4..835008b 100644
--- a/app/(routes)/shop/_components/ActiveFilters.tsx
+++ b/app/(routes)/shop/_components/ActiveFilters.tsx
@@ -53,15 +53,17 @@ export const formatActiveFilterCopy = (filter: ActiveFilter, t: Translator): Bil
       return t("chip.stock");
     case "search":
       return t("chip.search", { query: filter.value });
-    default: {
-      const exhaustiveCheck: never = filter;
-      throw new Error(`Unhandled filter kind: ${JSON.stringify(exhaustiveCheck)}`);
-      const fallback = filter as ActiveFilter & { label: string };
-      return { primary: fallback.label, secondary: fallback.label };
-    }
+    default:
+      return assertNever(filter);
   }
 };
 
+// Helper for exhaustive switch statements.  If we reach this function, the type system has
+// failed to narrow `filter.kind`, so throw a descriptive error.
+const assertNever = (value: never): never => {
+  throw new Error(`Unhandled filter kind: ${String(value)}`);
+};
+
 const ActiveFilters = ({ filters, onClear, onClearAll }: ActiveFiltersProps) => {
   const { t } = useShopLocale();
   if (!filters.length) return null;
diff --git a/app/(routes)/shop/_logic/useShop.ts b/app/(routes)/shop/_logic/useShop.ts
index 64d38ba..84c2ad0 100644
--- a/app/(routes)/shop/_logic/useShop.ts
+++ b/app/(routes)/shop/_logic/useShop.ts
@@ -190,29 +190,21 @@ export const useCatalog = () => {
   const [hydrated, setHydrated] = useState(false);
   useEffect(() => setHydrated(true), []);
 
-  const searchParamsString = searchParams?.toString() ?? "";
-  const currentParams = useMemo(() => new URLSearchParams(searchParamsString), [searchParamsString]);
+  // Derive filters and other query params from the serialized search parameters.  This avoids
+  // triggering unnecessary re-renders when the searchParams object identity changes.
   const filters = useMemo(
     () => parseFilters(new URLSearchParams(searchParamsString)),
     [searchParamsString],
   );
-  const activeTabId = currentParams.get("tab") ?? (filters.category ?? "featured");
-  const sort = (currentParams.get("sort") as SortOption | null) ?? "recommended";
-  const query = (currentParams.get("q") ?? "").toLowerCase();
-
-  const [searchInput, setSearchInput] = useState(() => currentParams.get("q") ?? "");
-  useEffect(() => {
-    setSearchInput(currentParams.get("q") ?? "");
-  }, [currentParams]);
-  const filters = useMemo(() => parseFilters(new URLSearchParams(searchParamsString)), [searchParamsString]);
   const activeTabId = searchParams?.get("tab") ?? (filters.category ?? "featured");
   const sort = (searchParams?.get("sort") as SortOption | null) ?? "recommended";
   const query = (searchParams?.get("q") ?? "").toLowerCase();
 
+  // Keep a local copy of the `q` parameter for the search input.  Whenever the URL changes,
+  // rehydrate this state from the search string.
   const [searchInput, setSearchInput] = useState(() => new URLSearchParams(searchParamsString).get("q") ?? "");
   useEffect(() => {
-    const nextQuery = new URLSearchParams(searchParamsString).get("q") ?? "";
-    setSearchInput(nextQuery);
+    setSearchInput(new URLSearchParams(searchParamsString).get("q") ?? "");
   }, [searchParamsString]);
 
   const updateParams = useCallback(
diff --git a/app/_components/match/HighlightsCarousel.tsx b/app/_components/match/HighlightsCarousel.tsx
new file mode 100644
index 0000000..fdfb3b9
--- /dev/null
+++ b/app/_components/match/HighlightsCarousel.tsx
@@ -0,0 +1,56 @@
+"use client";
+
+import { motion, useReducedMotion } from "framer-motion";
+
+import EmptyState from "@/app/_components/ui/EmptyState";
+import type { HighlightClip } from "@/app/_data/matches";
+
+type HighlightsCarouselProps = {
+  clips: HighlightClip[];
+};
+
+const HighlightsCarousel = ({ clips }: HighlightsCarouselProps) => {
+  const reduceMotion = useReducedMotion();
+
+  if (!clips || clips.length === 0) {
+    return (
+      <EmptyState
+        title="No highlights yet"
+        description="Video recaps appear moments after kick-off. Check back shortly."
+        icon="🎥"
+      />
+    );
+  }
+
+  return (
+    <div className="flex gap-4 overflow-x-auto pb-2" role="list" aria-label="Match highlights">
+      {clips.map((clip, index) => (
+        <motion.article
+          key={clip.id}
+          role="listitem"
+          className="relative min-w-[220px] max-w-[240px] overflow-hidden rounded-3xl bg-gradient-to-br from-blue-500/40 via-blue-400/20 to-blue-200/10 p-[1px]"
+          initial={reduceMotion ? undefined : { opacity: 0, y: 24 }}
+          animate={{ opacity: 1, y: 0 }}
+          transition={{ duration: 0.4, delay: reduceMotion ? 0 : index * 0.05, ease: "easeOut" }}
+        >
+          <div className="flex h-full flex-col justify-between rounded-3xl bg-black/40 p-4 text-white">
+            <div className="space-y-3">
+              <div
+                className="h-32 w-full rounded-2xl bg-cover bg-center"
+                style={{ backgroundImage: `url(${clip.thumbnail})` }}
+                aria-hidden="true"
+              />
+              <h3 className="text-base font-semibold leading-tight">{clip.title}</h3>
+            </div>
+            <div className="flex items-center justify-between text-xs text-white/70">
+              <span className="rounded-full bg-white/10 px-2 py-1 font-semibold">{clip.duration}</span>
+              <span>{clip.published}</span>
+            </div>
+          </div>
+        </motion.article>
+      ))}
+    </div>
+  );
+};
+
+export default HighlightsCarousel;
diff --git a/app/_components/match/LiveTicker.tsx b/app/_components/match/LiveTicker.tsx
new file mode 100644
index 0000000..49b4043
--- /dev/null
+++ b/app/_components/match/LiveTicker.tsx
@@ -0,0 +1,99 @@
+"use client";
+
+import { motion, useReducedMotion } from "framer-motion";
+import { useMemo } from "react";
+
+import type { MatchEvent, MatchStatus } from "@/app/_data/matches";
+
+const eventAccent: Record<MatchEvent["type"], string> = {
+  goal: "bg-emerald-500/20 text-emerald-100",
+  "card-yellow": "bg-amber-500/20 text-amber-100",
+  "card-red": "bg-rose-500/20 text-rose-100",
+  substitution: "bg-blue-500/20 text-blue-100",
+  var: "bg-purple-500/20 text-purple-100",
+  info: "bg-white/15 text-white/80",
+};
+
+const eventIcon: Record<MatchEvent["type"], string> = {
+  goal: "⚽",
+  "card-yellow": "🟨",
+  "card-red": "🟥",
+  substitution: "🔄",
+  var: "🖥️",
+  info: "ℹ️",
+};
+
+type LiveTickerEvent = MatchEvent & {
+  matchId: string;
+  fixture: string;
+  status: MatchStatus;
+  currentScore?: string;
+};
+
+type LiveTickerProps = {
+  events: LiveTickerEvent[];
+};
+
+const LiveTicker = ({ events }: LiveTickerProps) => {
+  const reduceMotion = useReducedMotion();
+
+  const marqueeEvents = useMemo(() => {
+    if (events.length === 0) {
+      return [] as LiveTickerEvent[];
+    }
+
+    return [...events, ...events];
+  }, [events]);
+
+  if (events.length === 0) {
+    return null;
+  }
+
+  return (
+    <div
+      className="glass relative overflow-hidden rounded-3xl px-4 py-3"
+      aria-live="polite"
+      role="status"
+    >
+      <motion.div
+        className="flex items-center gap-6 whitespace-nowrap"
+        initial={reduceMotion ? undefined : { x: "0%" }}
+        animate={reduceMotion ? undefined : { x: ["0%", "-50%"] }}
+        transition={
+          reduceMotion
+            ? undefined
+            : {
+                repeat: Infinity,
+                repeatType: "loop",
+                duration: Math.max(18, marqueeEvents.length * 6),
+                ease: "linear",
+              }
+        }
+      >
+        {marqueeEvents.map((event, index) => (
+          <span
+            key={`${event.id}-${index}`}
+            className="flex items-center gap-3 rounded-2xl bg-white/5 px-3 py-2 text-sm text-white/85 backdrop-blur"
+          >
+            <span className={`chip shrink-0 ${eventAccent[event.type]}`} aria-hidden="true">
+              {eventIcon[event.type]}
+            </span>
+            <span className="font-semibold text-white/80">{event.minute}'</span>
+            <span className="text-white/90">
+              <span className="font-semibold text-white">{event.fixture}</span>
+              {" "}• {event.description}
+            </span>
+            {event.currentScore ? (
+              <span className="rounded-full bg-white/10 px-2 py-0.5 text-xs font-semibold">
+                {event.currentScore}
+              </span>
+            ) : null}
+          </span>
+        ))}
+      </motion.div>
+    </div>
+  );
+};
+
+export type { LiveTickerEvent };
+export default LiveTicker;
diff --git a/app/_components/match/MatchCard.tsx b/app/_components/match/MatchCard.tsx
new file mode 100644
index 0000000..7996780
--- /dev/null
+++ b/app/_components/match/MatchCard.tsx
@@ -0,0 +1,130 @@
+"use client";
+
+import Link from "next/link";
+import { motion, useReducedMotion } from "framer-motion";
+import { useCallback, type KeyboardEvent } from "react";
+
+import type { Match } from "@/app/_data/matches";
+
+const statusCopy: Record<Match["status"], { label: string; tone: string }> = {
+  live: { label: "Live", tone: "bg-emerald-500/20 text-emerald-100" },
+  upcoming: { label: "Upcoming", tone: "bg-blue-500/20 text-blue-100" },
+  ft: { label: "Full time", tone: "bg-white/20 text-white" },
+};
+
+const formatKickoff = (iso?: string) => {
+  if (!iso) return "TBC";
+  try {
+    const date = new Date(iso);
+    return new Intl.DateTimeFormat(undefined, {
+      weekday: "short",
+      hour: "2-digit",
+      minute: "2-digit",
+    }).format(date);
+  } catch (error) {
+    return "TBC";
+  }
+};
+
+type MatchCardProps = {
+  match: Match;
+  onSelect?: (match: Match) => void;
+  isActive?: boolean;
+};
+
+const MatchCard = ({ match, onSelect, isActive }: MatchCardProps) => {
+  const reduceMotion = useReducedMotion();
+  const status = statusCopy[match.status];
+
+  const handleSelect = useCallback(() => {
+    if (onSelect) {
+      onSelect(match);
+    }
+  }, [match, onSelect]);
+
+  const handleKeyDown = useCallback(
+    (event: KeyboardEvent<HTMLDivElement>) => {
+      if (event.key === "Enter" || event.key === " ") {
+        event.preventDefault();
+        handleSelect();
+      }
+    },
+    [handleSelect],
+  );
+
+  return (
+    <motion.div
+      role="listitem"
+      tabIndex={0}
+      aria-label={`${match.home} vs ${match.away}`}
+      aria-expanded={Boolean(isActive)}
+      aria-haspopup="dialog"
+      aria-roledescription="Match card"
+      onClick={handleSelect}
+      onKeyDown={handleKeyDown}
+      whileTap={reduceMotion ? undefined : { scale: 1.04 }}
+      whileHover={reduceMotion ? undefined : { scale: 1.02 }}
+      transition={{ duration: 0.18, ease: "easeOut" }}
+      className={`group relative flex min-w-[260px] cursor-pointer select-none flex-col gap-4 rounded-3xl bg-gradient-to-br from-white/10 via-white/5 to-white/10 p-4 text-left transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white/80 sm:min-w-[280px] ${isActive ? "ring-2 ring-white/70" : "ring-1 ring-white/10"}`}
+    >
+      <div className="flex items-center justify-between text-sm text-white/70">
+        <span className="rounded-full bg-white/10 px-3 py-1 font-semibold text-white/80">
+          {match.badge ?? match.comp}
+        </span>
+        <span className={`inline-flex items-center gap-1 rounded-full px-3 py-1 text-xs font-semibold uppercase tracking-wide ${status.tone}`}>
+          {match.status === "live" ? <span aria-hidden="true" className="h-2 w-2 rounded-full bg-emerald-300 animate-pulse" /> : null}
+          {status.label}
+        </span>
+      </div>
+
+      <div className="flex items-center justify-between gap-4">
+        <div className="flex-1 space-y-1">
+          <p className="text-sm font-medium text-white/70">{match.home}</p>
+          <p className="text-lg font-semibold text-white">{match.score ? match.score.home : "-"}</p>
+        </div>
+        <div className="flex flex-col items-center justify-center">
+          <span className="text-xs uppercase tracking-wide text-white/60">vs</span>
+          <span className="text-sm font-semibold text-white/80">{match.liveMinute ?? formatKickoff(match.kickoff)}</span>
+        </div>
+        <div className="flex-1 space-y-1 text-right">
+          <p className="text-sm font-medium text-white/70">{match.away}</p>
+          <p className="text-lg font-semibold text-white">{match.score ? match.score.away : "-"}</p>
+        </div>
+      </div>
+
+      <div className="flex flex-wrap items-center gap-3 text-xs text-white/70">
+        <span className="rounded-full bg-white/10 px-3 py-1">{match.venue}</span>
+        {match.broadcast ? <span className="rounded-full bg-white/10 px-3 py-1">{match.broadcast}</span> : null}
+      </div>
+
+      {match.status === "upcoming" ? (
+        <div className="flex gap-3">
+          <Link
+            href="/tickets"
+            className="btn-primary flex-1 text-center"
+            onClick={(event) => event.stopPropagation()}
+          >
+            Buy ticket
+          </Link>
+          <button
+            type="button"
+            className="btn flex-1 text-center"
+            onClick={(event) => {
+              event.stopPropagation();
+              handleSelect();
+            }}
+          >
+            Match centre
+          </button>
+        </div>
+      ) : (
+        <div className="flex items-center justify-between text-sm text-white/70">
+          <span>{formatKickoff(match.kickoff)}</span>
+          <span>Tap for more stats →</span>
+        </div>
+      )}
+    </motion.div>
+  );
+};
+
+export default MatchCard;
diff --git a/app/_components/match/MatchDetailSheet.tsx b/app/_components/match/MatchDetailSheet.tsx
new file mode 100644
index 0000000..1d0470a
--- /dev/null
+++ b/app/_components/match/MatchDetailSheet.tsx
@@ -0,0 +1,385 @@
+"use client";
+
+import { AnimatePresence, motion, useReducedMotion } from "framer-motion";
+import { useEffect, useMemo, useRef, useState, type ReactNode } from "react";
+
+import EmptyState from "@/app/_components/ui/EmptyState";
+import type { Match, MatchChatMessage, MatchEvent, MatchStatBar } from "@/app/_data/matches";
+
+const tabOrder = ["lineups", "stats", "timeline", "chat"] as const;
+type TabKey = (typeof tabOrder)[number];
+
+const tabLabel: Record<TabKey, string> = {
+  lineups: "Line-ups",
+  stats: "Stats",
+  timeline: "Timeline",
+  chat: "Chat",
+};
+
+const eventIcon: Record<MatchEvent["type"], string> = {
+  goal: "⚽",
+  "card-yellow": "🟨",
+  "card-red": "🟥",
+  substitution: "🔄",
+  var: "🖥️",
+  info: "•",
+};
+
+type MatchDetailSheetProps = {
+  open: boolean;
+  match: Match | null;
+  onClose: () => void;
+};
+
+const renderLineups = (match: Match) => {
+  if (!match.lineups) {
+    return (
+      <EmptyState
+        title="Line-ups unavailable"
+        description="We could not load team sheets. Refresh closer to kickoff."
+        icon="📋"
+      />
+    );
+  }
+
+  return (
+    <div className="grid gap-4 md:grid-cols-2">
+      {["home", "away"].map((side) => {
+        const lineup = match.lineups?.[side as "home" | "away"];
+        const teamName = side === "home" ? match.home : match.away;
+        if (!lineup) return null;
+        return (
+          <div key={side} className="space-y-4 rounded-2xl bg-white/5 p-4">
+            <div className="flex items-center justify-between">
+              <div>
+                <p className="text-sm uppercase tracking-wide text-white/60">{teamName}</p>
+                <p className="text-lg font-semibold text-white/90">{lineup.formation}</p>
+              </div>
+              <span className="rounded-full bg-white/10 px-3 py-1 text-xs text-white/70">Coach {lineup.coach}</span>
+            </div>
+            <ul className="space-y-2 text-sm text-white/80">
+              {lineup.starters.map((player) => (
+                <li key={`${lineup.coach}-${player.number}`} className="flex items-center justify-between rounded-xl bg-white/5 px-3 py-2">
+                  <span className="font-semibold text-white/90">
+                    {player.number.toString().padStart(2, "0")} {player.name}
+                  </span>
+                  {player.role ? <span className="text-xs uppercase text-white/60">{player.role}</span> : null}
+                </li>
+              ))}
+            </ul>
+            <div className="space-y-2 text-xs text-white/70">
+              <p className="font-semibold uppercase tracking-wide text-white/80">Bench</p>
+              <p>{lineup.substitutes.map((player) => `${player.number} ${player.name}`).join(", ")}</p>
+            </div>
+          </div>
+        );
+      })}
+    </div>
+  );
+};
+
+const StatBars = ({ stats }: { stats?: MatchStatBar[] }) => {
+  if (!stats || stats.length === 0) {
+    return (
+      <EmptyState
+        title="Stats loading"
+        description="Advanced match data will appear as soon as feeds refresh."
+        icon="📊"
+      />
+    );
+  }
+
+  return (
+    <ul className="space-y-4">
+      {stats.map((stat) => {
+        const total = stat.home + stat.away;
+        const homePercent = total === 0 ? 0 : Math.round((stat.home / total) * 100);
+        const awayPercent = Math.min(100, 100 - homePercent);
+        return (
+          <li key={stat.id} className="space-y-2">
+            <div className="flex items-center justify-between text-xs uppercase tracking-wide text-white/60">
+              <span>{stat.label}</span>
+              <span>
+                {stat.home}
+                {stat.unit ?? ""} : {stat.away}
+                {stat.unit ?? ""}
+              </span>
+            </div>
+            <div className="flex h-2 overflow-hidden rounded-full bg-white/10">
+              <div className="bg-blue-500" style={{ width: `${homePercent}%` }} aria-hidden="true" />
+              <div className="bg-white/40" style={{ width: `${awayPercent}%` }} aria-hidden="true" />
+            </div>
+          </li>
+        );
+      })}
+    </ul>
+  );
+};
+
+const Timeline = ({ events }: { events?: MatchEvent[] }) => {
+  if (!events || events.length === 0) {
+    return (
+      <EmptyState
+        title="No moments logged yet"
+        description="Match commentary will flow here once the whistle blows."
+        icon="🕒"
+      />
+    );
+  }
+
+  return (
+    <ol className="space-y-3">
+      {events.map((event) => (
+        <li key={event.id} className="flex items-start gap-3 rounded-2xl bg-white/5 px-4 py-3">
+          <span className="text-sm font-semibold text-white/70">{event.minute}'</span>
+          <div className="space-y-1 text-sm text-white/85">
+            <div className="flex items-center gap-2 text-white">
+              <span aria-hidden="true">{eventIcon[event.type]}</span>
+              {event.player ? <span className="font-semibold">{event.player}</span> : null}
+              {event.scoreline ? (
+                <span className="rounded-full bg-white/10 px-2 py-0.5 text-xs font-semibold text-white/80">{event.scoreline}</span>
+              ) : null}
+            </div>
+            <p>{event.description}</p>
+          </div>
+        </li>
+      ))}
+    </ol>
+  );
+};
+
+const ChatMessages = ({ messages }: { messages?: MatchChatMessage[] }) => {
+  if (!messages || messages.length === 0) {
+    return (
+      <EmptyState
+        title="Chat is quiet"
+        description="Be the first to react to the action. Sign in to cheer with other fans!"
+        icon="💬"
+      />
+    );
+  }
+
+  return (
+    <motion.ul
+      className="space-y-3"
+      initial="hidden"
+      animate="visible"
+      variants={{
+        hidden: {},
+        visible: {
+          transition: {
+            staggerChildren: 0.08,
+          },
+        },
+      }}
+    >
+      {messages.map((message) => (
+        <motion.li
+          key={message.id}
+          variants={{
+            hidden: { opacity: 0, y: 8 },
+            visible: { opacity: 1, y: 0 },
+          }}
+          transition={{ duration: 0.25, ease: "easeOut" }}
+          className={`rounded-2xl px-4 py-3 text-sm ${
+            message.accent === "mod"
+              ? "bg-amber-500/15 text-amber-100"
+              : message.accent === "highlight"
+              ? "bg-emerald-500/15 text-emerald-50"
+              : "bg-white/5 text-white/85"
+          }`}
+        >
+          <div className="flex items-center justify-between text-xs uppercase tracking-wide text-white/60">
+            <span className="font-semibold text-white/80">{message.author}</span>
+            <span>{message.timestamp}</span>
+          </div>
+          <p className="mt-1 text-sm">{message.message}</p>
+        </motion.li>
+      ))}
+    </motion.ul>
+  );
+};
+
+const MatchDetailSheet = ({ open, match, onClose }: MatchDetailSheetProps) => {
+  const reduceMotion = useReducedMotion();
+  const [activeTab, setActiveTab] = useState<TabKey>("lineups");
+  const closeButtonRef = useRef<HTMLButtonElement>(null);
+
+  useEffect(() => {
+    if (!open) {
+      return undefined;
+    }
+
+    const timeout = window.setTimeout(() => {
+      closeButtonRef.current?.focus();
+    }, 120);
+
+    const handleKey = (event: KeyboardEvent) => {
+      if (event.key === "Escape") {
+        onClose();
+      }
+    };
+
+    document.addEventListener("keydown", handleKey);
+
+    return () => {
+      window.clearTimeout(timeout);
+      document.removeEventListener("keydown", handleKey);
+    };
+  }, [open, onClose]);
+
+  useEffect(() => {
+    if (match) {
+      setActiveTab("lineups");
+    }
+  }, [match]);
+
+  const kickoffLabel = useMemo(() => {
+    if (!match) {
+      return "";
+    }
+
+    const kickoffDate = new Date(match.kickoff);
+    if (Number.isNaN(kickoffDate.getTime())) {
+      return "Kickoff TBC";
+    }
+
+    return kickoffDate.toLocaleString(undefined, {
+      weekday: "short",
+      hour: "2-digit",
+      minute: "2-digit",
+    });
+  }, [match]);
+
+  const tabPanels = useMemo(() => {
+    if (!match) {
+      return null;
+    }
+
+    return {
+      lineups: renderLineups(match),
+      stats: <StatBars stats={match.stats} />,
+      timeline: <Timeline events={match.timeline ?? match.events} />,
+      chat: <ChatMessages messages={match.chat} />,
+    } satisfies Record<TabKey, ReactNode>;
+  }, [match]);
+
+  const activeTabIndex = tabOrder.indexOf(activeTab);
+  const indicatorWidth = `${100 / tabOrder.length}%`;
+
+  return (
+    <AnimatePresence>
+      {open && match ? (
+        <motion.div
+          className="fixed inset-0 z-50 flex items-end justify-center bg-black/40 backdrop-blur-sm sm:items-center"
+          initial={reduceMotion ? { opacity: 1 } : { opacity: 0 }}
+          animate={{ opacity: 1 }}
+          exit={reduceMotion ? { opacity: 0 } : { opacity: 0 }}
+          onClick={onClose}
+        >
+          <motion.div
+            role="dialog"
+            aria-modal="true"
+            aria-labelledby="match-detail-heading"
+            className="glass relative flex w-full max-w-3xl flex-col gap-6 rounded-t-3xl bg-gradient-to-b from-white/20 to-white/5 px-6 py-6 sm:rounded-3xl"
+            initial={reduceMotion ? undefined : { y: 80, opacity: 0 }}
+            animate={{ y: 0, opacity: 1 }}
+            exit={reduceMotion ? undefined : { y: 80, opacity: 0 }}
+            transition={{ duration: reduceMotion ? 0 : 0.25, ease: "easeOut" }}
+            onClick={(event) => event.stopPropagation()}
+          >
+            <div className="flex flex-col gap-4">
+              <div className="flex items-start justify-between gap-4">
+                <div>
+                  <p className="text-xs uppercase tracking-wide text-white/70">{match.comp}</p>
+                  <h2 id="match-detail-heading" className="text-2xl font-semibold text-white">
+                    {match.home} vs {match.away}
+                  </h2>
+                  <p className="text-sm text-white/70">
+                    {match.round} · {match.venue}
+                  </p>
+                </div>
+                <button
+                  ref={closeButtonRef}
+                  onClick={onClose}
+                  className="btn"
+                  aria-label="Close match details"
+                >
+                  Close
+                </button>
+              </div>
+              <div className="flex items-center justify-between rounded-2xl bg-white/10 px-4 py-3">
+                <div className="text-left">
+                  <p className="text-sm text-white/70">{match.home}</p>
+                  <p className="text-2xl font-semibold text-white">{match.score?.home ?? "-"}</p>
+                </div>
+                <div className="text-center text-white/80">
+                  <p className="text-sm uppercase tracking-wide">
+                    {match.liveMinute ?? (match.status === "upcoming" ? "Kickoff" : "FT")}
+                  </p>
+                  <p className="text-sm text-white/60">{kickoffLabel}</p>
+                </div>
+                <div className="text-right">
+                  <p className="text-sm text-white/70">{match.away}</p>
+                  <p className="text-2xl font-semibold text-white">{match.score?.away ?? "-"}</p>
+                </div>
+              </div>
+            </div>
+
+            <div className="border-b border-white/10 pb-2">
+              <div className="relative flex flex-1 items-center gap-2" role="tablist" aria-label="Match detail sections">
+                {tabOrder.map((tab) => {
+                  const tabId = `match-tab-${tab}`;
+                  const panelId = `match-panel-${tab}`;
+                  return (
+                    <button
+                      key={tab}
+                      id={tabId}
+                      role="tab"
+                      type="button"
+                      onClick={() => setActiveTab(tab)}
+                      aria-selected={activeTab === tab}
+                      aria-controls={panelId}
+                      className={`relative rounded-full px-4 py-2 text-sm font-semibold transition ${
+                        activeTab === tab ? "text-blue-900" : "text-white/80"
+                      }`}
+                    >
+                      <span
+                        className={`inline-flex items-center justify-center rounded-full px-3 py-1 transition ${
+                          activeTab === tab ? "bg-white text-blue-700" : "bg-white/10 text-white/80"
+                        }`}
+                      >
+                        {tabLabel[tab]}
+                      </span>
+                    </button>
+                  );
+                })}
+                <motion.span
+                  aria-hidden="true"
+                  className="pointer-events-none absolute bottom-0 left-0 h-1 rounded-full bg-white"
+                  initial={false}
+                  animate={{
+                    x: `${activeTabIndex * 100}%`,
+                  }}
+                  transition={{ duration: reduceMotion ? 0 : 0.25, ease: "easeOut" }}
+                  style={{ width: indicatorWidth }}
+                />
+              </div>
+            </div>
+
+            <div
+              className="space-y-4"
+              role="tabpanel"
+              id={`match-panel-${activeTab}`}
+              aria-labelledby={`match-tab-${activeTab}`}
+            >
+              {tabPanels ? tabPanels[activeTab] : null}
+            </div>
+          </motion.div>
+        </motion.div>
+      ) : null}
+    </AnimatePresence>
+  );
+};
+
+export default MatchDetailSheet;
diff --git a/app/_components/match/StandingsTable.tsx b/app/_components/match/StandingsTable.tsx
new file mode 100644
index 0000000..ecec685
--- /dev/null
+++ b/app/_components/match/StandingsTable.tsx
@@ -0,0 +1,93 @@
+import type { StandingsRow } from "@/app/_data/matches";
+
+type StandingsTableProps = {
+  table: StandingsRow[];
+  updatedAt?: string;
+};
+
+const formBadgeStyles: Record<"W" | "D" | "L", string> = {
+  W: "bg-emerald-500/20 text-emerald-100",
+  D: "bg-white/10 text-white/80",
+  L: "bg-rose-500/20 text-rose-100",
+};
+
+const formatUpdatedAt = (iso?: string) => {
+  if (!iso) return "Updated moments ago";
+  const date = new Date(iso);
+  if (Number.isNaN(date.getTime())) return "Updated moments ago";
+
+  const diff = Date.now() - date.getTime();
+  const minutes = Math.floor(diff / 60000);
+
+  if (minutes < 1) return "Updated just now";
+  if (minutes === 1) return "Updated 1 minute ago";
+  if (minutes < 60) return `Updated ${minutes} minutes ago`;
+
+  const hours = Math.floor(minutes / 60);
+  if (hours === 1) return "Updated 1 hour ago";
+  if (hours < 24) return `Updated ${hours} hours ago`;
+
+  const days = Math.floor(hours / 24);
+  return days === 1 ? "Updated 1 day ago" : `Updated ${days} days ago`;
+};
+
+const StandingsTable = ({ table, updatedAt }: StandingsTableProps) => {
+  if (!table || table.length === 0) {
+    return null;
+  }
+
+  return (
+    <div className="card overflow-hidden">
+      <div className="flex items-center justify-between pb-3">
+        <h3 className="text-lg font-semibold text-white">League table</h3>
+        <span className="text-xs uppercase tracking-wide text-white/60">{formatUpdatedAt(updatedAt)}</span>
+      </div>
+      <div className="overflow-x-auto">
+        <table className="w-full text-left text-sm text-white/80">
+          <thead className="text-xs uppercase tracking-wide text-white/60">
+            <tr className="border-b border-white/10">
+              <th className="py-2 pr-4">#</th>
+              <th className="py-2 pr-4">Team</th>
+              <th className="py-2 pr-4 text-center">P</th>
+              <th className="py-2 pr-4 text-center">W</th>
+              <th className="py-2 pr-4 text-center">D</th>
+              <th className="py-2 pr-4 text-center">L</th>
+              <th className="py-2 pr-4 text-center">GD</th>
+              <th className="py-2 pr-4 text-center">Pts</th>
+              <th className="py-2">Form</th>
+            </tr>
+          </thead>
+          <tbody>
+            {table.map((row) => (
+              <tr key={row.team} className="border-b border-white/5 last:border-none">
+                <td className="py-3 pr-4 text-white/70">{row.position}</td>
+                <td className="py-3 pr-4 font-semibold text-white">{row.team}</td>
+                <td className="py-3 pr-4 text-center">{row.played}</td>
+                <td className="py-3 pr-4 text-center">{row.wins}</td>
+                <td className="py-3 pr-4 text-center">{row.draws}</td>
+                <td className="py-3 pr-4 text-center">{row.losses}</td>
+                <td className="py-3 pr-4 text-center">{row.goalDiff}</td>
+                <td className="py-3 pr-4 text-center text-lg font-semibold text-white">{row.points}</td>
+                <td className="py-3">
+                  <div className="flex gap-2">
+                    {row.form.map((result, index) => (
+                      <span
+                        key={`${row.team}-form-${index}`}
+                        className={`rounded-full px-2 py-0.5 text-xs font-semibold ${formBadgeStyles[result]}`}
+                        aria-label={`${row.team} ${result === "W" ? "win" : result === "D" ? "draw" : "loss"}`}
+                      >
+                        {result}
+                      </span>
+                    ))}
+                  </div>
+                </td>
+              </tr>
+            ))}
+          </tbody>
+        </table>
+      </div>
+    </div>
+  );
+};
+
+export default StandingsTable;
diff --git a/app/_components/more/EventsWidget.tsx b/app/_components/more/EventsWidget.tsx
new file mode 100644
index 0000000..f8466ae
--- /dev/null
+++ b/app/_components/more/EventsWidget.tsx
@@ -0,0 +1,77 @@
+"use client";
+
+import { motion, useReducedMotion } from "framer-motion";
+import { useRouter } from "next/navigation";
+import { CalendarDays, Clock, MapPin, ArrowRight } from "lucide-react";
+
+import type { Event } from "@/app/_data/more";
+
+export type EventsWidgetProps = {
+  event: Event;
+  onJoin?: () => void;
+};
+
+export function EventsWidget({ event, onJoin }: EventsWidgetProps) {
+  const prefersReducedMotion = useReducedMotion();
+  const router = useRouter();
+
+  const handleJoin = () => {
+    if (onJoin) {
+      onJoin();
+      return;
+    }
+    router.push("/events");
+  };
+
+  return (
+    <motion.section
+      className="card flex h-full flex-col justify-between gap-4 bg-white/10 text-white"
+      initial={prefersReducedMotion ? false : { opacity: 0, y: 12 }}
+      whileInView={prefersReducedMotion ? undefined : { opacity: 1, y: 0 }}
+      viewport={{ once: true, amount: 0.6 }}
+      transition={{ duration: 0.25, ease: "easeOut" }}
+      aria-labelledby="next-event-heading"
+    >
+      <header className="flex items-start justify-between gap-3">
+        <div className="rounded-2xl bg-white/20 p-3">
+          <CalendarDays className="h-6 w-6" aria-hidden />
+        </div>
+        <span className="rounded-full bg-white/15 px-3 py-1 text-xs uppercase tracking-wide text-white/80">
+          Next up
+        </span>
+      </header>
+      <div>
+        <p className="text-sm text-white/70">Matchday spotlight</p>
+        <h3 id="next-event-heading" className="text-xl font-semibold">
+          {event.title}
+        </h3>
+        {event.description ? (
+          <p className="mt-2 text-sm text-white/80">{event.description}</p>
+        ) : null}
+      </div>
+      <dl className="space-y-2 text-sm text-white/80">
+        <div className="flex items-center gap-2">
+          <CalendarDays className="h-4 w-4" aria-hidden />
+          <dd className="font-medium">{event.date}</dd>
+        </div>
+        <div className="flex items-center gap-2">
+          <Clock className="h-4 w-4" aria-hidden />
+          <dd className="font-medium">{event.time}</dd>
+        </div>
+        <div className="flex items-center gap-2">
+          <MapPin className="h-4 w-4" aria-hidden />
+          <dd className="font-medium">{event.venue}</dd>
+        </div>
+      </dl>
+      <button
+        type="button"
+        onClick={handleJoin}
+        className="btn inline-flex items-center justify-center gap-2 rounded-2xl px-4 py-3 text-sm font-semibold focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+        aria-label="Join event"
+      >
+        Join match center
+        <ArrowRight className="h-4 w-4" aria-hidden />
+      </button>
+    </motion.section>
+  );
+}
diff --git a/app/_components/more/FooterBrand.tsx b/app/_components/more/FooterBrand.tsx
new file mode 100644
index 0000000..2c0fed7
--- /dev/null
+++ b/app/_components/more/FooterBrand.tsx
@@ -0,0 +1,34 @@
+import Link from "next/link";
+
+export function FooterBrand() {
+  return (
+    <footer className="mt-10 flex flex-col items-center gap-2 text-center text-xs text-white/80">
+      <div className="flex items-center gap-2">
+        <span className="font-semibold tracking-wide">Rayon Sports</span>
+        <span aria-hidden>•</span>
+        <span>Version 5.0.0</span>
+      </div>
+      <p className="text-white/60">Made for Fans of Gikundiro 💙</p>
+      <div className="flex flex-wrap items-center justify-center gap-3 text-white/70">
+        <Link
+          href="/settings/about"
+          className="underline-offset-4 hover:underline focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/80 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+        >
+          App info
+        </Link>
+        <Link
+          href="/legal/privacy"
+          className="underline-offset-4 hover:underline focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/80 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+        >
+          Privacy
+        </Link>
+        <Link
+          href="/legal/terms"
+          className="underline-offset-4 hover:underline focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/80 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+        >
+          Terms
+        </Link>
+      </div>
+    </footer>
+  );
+}
diff --git a/app/_components/more/FundraiserWidget.tsx b/app/_components/more/FundraiserWidget.tsx
new file mode 100644
index 0000000..fd024aa
--- /dev/null
+++ b/app/_components/more/FundraiserWidget.tsx
@@ -0,0 +1,89 @@
+"use client";
+
+import { motion, useReducedMotion } from "framer-motion";
+import { useRouter } from "next/navigation";
+import { HeartHandshake } from "lucide-react";
+
+import type { Fundraiser } from "@/app/_data/more";
+
+const currencyFormatter = new Intl.NumberFormat("en-RW", {
+  style: "currency",
+  currency: "RWF",
+  maximumFractionDigits: 0,
+});
+
+export type FundraiserWidgetProps = {
+  fundraiser: Fundraiser;
+  onDonate?: () => void;
+};
+
+export function FundraiserWidget({ fundraiser, onDonate }: FundraiserWidgetProps) {
+  const prefersReducedMotion = useReducedMotion();
+  const router = useRouter();
+  const progressValue = Math.min(Math.max(fundraiser.progress, 0), 1);
+  const progressPercent = Math.round(progressValue * 100);
+
+  const handleDonate = () => {
+    if (onDonate) {
+      onDonate();
+      return;
+    }
+    router.push("/fundraising");
+  };
+
+  return (
+    <motion.section
+      className="card flex h-full flex-col justify-between gap-4 bg-white/10 text-white"
+      initial={prefersReducedMotion ? false : { opacity: 0, y: 12 }}
+      whileInView={prefersReducedMotion ? undefined : { opacity: 1, y: 0 }}
+      viewport={{ once: true, amount: 0.6 }}
+      transition={{ duration: 0.25, ease: "easeOut" }}
+      aria-labelledby="fundraiser-heading"
+    >
+      <header className="flex items-start justify-between gap-3">
+        <div className="rounded-2xl bg-white/20 p-3">
+          <HeartHandshake className="h-6 w-6" aria-hidden />
+        </div>
+        <span className="rounded-full bg-white/15 px-3 py-1 text-xs uppercase tracking-wide text-white/80">
+          Goal {currencyFormatter.format(fundraiser.goal)}
+        </span>
+      </header>
+      <div>
+        <p className="text-sm text-white/70">Active fundraiser</p>
+        <h3 id="fundraiser-heading" className="text-xl font-semibold">
+          {fundraiser.title}
+        </h3>
+        {fundraiser.description ? (
+          <p className="mt-2 text-sm text-white/80">{fundraiser.description}</p>
+        ) : null}
+      </div>
+      <div className="space-y-2">
+        <div className="flex items-center justify-between text-xs uppercase tracking-wide text-white/70">
+          <span>{progressPercent}% funded</span>
+          <span>RWF {currencyFormatter.format(Math.round(progressValue * fundraiser.goal)).replace("RWF", "")}</span>
+        </div>
+        <div className="h-3 w-full overflow-hidden rounded-full bg-white/10">
+          <motion.div
+            className="h-full rounded-full bg-emerald-400"
+            initial={prefersReducedMotion ? undefined : { width: 0 }}
+            animate={{ width: `${progressPercent}%` }}
+            transition={{ duration: 0.25, ease: "easeOut" }}
+            role="progressbar"
+            aria-valuemin={0}
+            aria-valuemax={100}
+            aria-valuenow={progressPercent}
+            aria-label="Fundraiser progress"
+          />
+        </div>
+      </div>
+      <button
+        type="button"
+        onClick={handleDonate}
+        className="btn-primary inline-flex items-center justify-center rounded-2xl px-4 py-3 text-sm font-semibold focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+        aria-label="Donate to fundraiser"
+      >
+        Donate now
+      </button>
+    </motion.section>
+  );
+}
diff --git a/app/_components/more/MembershipWidget.tsx b/app/_components/more/MembershipWidget.tsx
new file mode 100644
index 0000000..2ec605d
--- /dev/null
+++ b/app/_components/more/MembershipWidget.tsx
@@ -0,0 +1,78 @@
+"use client";
+
+import { motion, useReducedMotion } from "framer-motion";
+import { useRouter } from "next/navigation";
+import { ArrowUpRight, Crown } from "lucide-react";
+
+import type { Membership } from "@/app/_data/more";
+
+const tierDescriptions: Record<Membership["tier"], string> = {
+  Guest: "Unlock fandom perks by becoming an official member.",
+  Fan: "You're connected. Upgrade to Gold for matchday luxuries.",
+  Gold: "Elite access unlocked. Enjoy every premium benefit.",
+};
+
+export type MembershipWidgetProps = {
+  membership: Membership;
+  onUpgrade?: () => void;
+};
+
+export function MembershipWidget({ membership, onUpgrade }: MembershipWidgetProps) {
+  const prefersReducedMotion = useReducedMotion();
+  const router = useRouter();
+
+  const handleUpgrade = () => {
+    if (membership.tier === "Gold") {
+      router.push("/membership");
+      return;
+    }
+    if (onUpgrade) {
+      onUpgrade();
+      return;
+    }
+    router.push("/membership/upgrade");
+  };
+
+  return (
+    <motion.section
+      className="card flex h-full flex-col justify-between gap-4 bg-white/10 text-white"
+      initial={prefersReducedMotion ? false : { opacity: 0, y: 12 }}
+      whileInView={prefersReducedMotion ? undefined : { opacity: 1, y: 0 }}
+      viewport={{ once: true, amount: 0.6 }}
+      transition={{ duration: 0.25, ease: "easeOut" }}
+      aria-labelledby="membership-heading"
+    >
+      <header className="flex items-start justify-between gap-3">
+        <div className="rounded-2xl bg-white/20 p-3">
+          <Crown className="h-6 w-6" aria-hidden />
+        </div>
+        <span className="rounded-full bg-white/15 px-3 py-1 text-xs uppercase tracking-wide text-white/80">
+          Expires {membership.expiresOn}
+        </span>
+      </header>
+      <div>
+        <p className="text-sm text-white/70">Membership</p>
+        <h3 id="membership-heading" className="text-2xl font-semibold">
+          {membership.tier} tier
+        </h3>
+        <p className="mt-2 text-sm text-white/80">{tierDescriptions[membership.tier]}</p>
+      </div>
+      <div className="flex flex-wrap gap-2 text-xs uppercase tracking-wide text-white/70">
+        {membership.benefits.map((benefit) => (
+          <span key={benefit} className="rounded-full bg-white/10 px-3 py-1">
+            {benefit}
+          </span>
+        ))}
+      </div>
+      <button
+        type="button"
+        onClick={handleUpgrade}
+        className="btn-primary inline-flex items-center justify-center gap-1 rounded-2xl px-4 py-3 text-sm font-semibold focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+        aria-label={membership.tier === "Gold" ? "Manage membership" : "Upgrade membership"}
+      >
+        {membership.tier === "Gold" ? "Manage membership" : "Upgrade"}
+        <ArrowUpRight className="h-4 w-4" aria-hidden />
+      </button>
+    </motion.section>
+  );
+}
diff --git a/app/_components/more/MoreDashboard.tsx b/app/_components/more/MoreDashboard.tsx
new file mode 100644
index 0000000..935b20f
--- /dev/null
+++ b/app/_components/more/MoreDashboard.tsx
@@ -0,0 +1,237 @@
+"use client";
+
+import { useMemo, useState } from "react";
+import { useRouter } from "next/navigation";
+import { AnimatePresence, motion, useReducedMotion } from "framer-motion";
+import type { LucideIcon } from "lucide-react";
+import {
+  CalendarDays,
+  HeartHandshake,
+  ShoppingBag,
+  Ticket,
+  Users,
+  Wallet2,
+} from "lucide-react";
+
+import type {
+  Event,
+  Fundraiser,
+  Membership,
+  Profile,
+  QuickTile,
+  QuickTileIcon,
+  SettingGroup,
+  Wallet,
+} from "@/app/_data/more";
+import { ProfileCard } from "@/app/_components/more/ProfileCard";
+import { WalletWidget } from "@/app/_components/more/WalletWidget";
+import { MembershipWidget } from "@/app/_components/more/MembershipWidget";
+import { FundraiserWidget } from "@/app/_components/more/FundraiserWidget";
+import { EventsWidget } from "@/app/_components/more/EventsWidget";
+import { SettingsList } from "@/app/_components/more/SettingsList";
+import { FooterBrand } from "@/app/_components/more/FooterBrand";
+import { useAuth } from "@/providers/auth-provider";
+import { useToast } from "@/components/ui/use-toast";
+import { cn } from "@/lib/utils";
+
+const tileGradients: Record<QuickTile["accent"], string> = {
+  blue: "from-sky-500/70 to-blue-500/80",
+  green: "from-emerald-400/70 to-green-500/80",
+  yellow: "from-amber-300/80 to-orange-400/80",
+  pink: "from-rose-400/80 to-pink-500/80",
+  teal: "from-teal-400/80 to-cyan-500/80",
+  purple: "from-violet-400/70 to-indigo-500/80",
+};
+
+const tileIcons: Record<QuickTileIcon, LucideIcon> = {
+  wallet: Wallet2,
+  tickets: Ticket,
+  shop: ShoppingBag,
+  community: Users,
+  fundraising: HeartHandshake,
+  events: CalendarDays,
+};
+
+const toggleMessages: Record<string, { on: string; off: string }> = {
+  theme: {
+    on: "Adaptive theme on",
+    off: "Adaptive theme off",
+  },
+  notifications: {
+    on: "Smart notifications enabled",
+    off: "Notifications paused",
+  },
+};
+
+export type MoreDashboardProps = {
+  profile: Profile;
+  wallet: Wallet;
+  membership: Membership;
+  fundraiser: Fundraiser;
+  event: Event;
+  quickTiles: QuickTile[];
+  settings: SettingGroup[];
+};
+
+export function MoreDashboard({
+  profile,
+  wallet,
+  membership,
+  fundraiser,
+  event,
+  quickTiles,
+  settings,
+}: MoreDashboardProps) {
+  const router = useRouter();
+  const { toast } = useToast();
+  const prefersReducedMotion = useReducedMotion();
+  const { user, logout, loading } = useAuth();
+  const [isLoggingOut, setIsLoggingOut] = useState(false);
+
+  const displayProfile = useMemo(() => {
+    if (!user) {
+      return profile;
+    }
+    return {
+      ...profile,
+      id: user.id,
+      name: profile.name,
+    };
+  }, [profile, user]);
+
+  const handleAddMoney = () => {
+    toast({ title: "Wallet top up", description: "Opening wallet control center." });
+    router.push("/wallet/top-up");
+  };
+
+  const handleUpgrade = () => {
+    toast({ title: "Membership", description: "Reviewing membership options." });
+    router.push(membership.tier === "Gold" ? "/membership" : "/membership/upgrade");
+  };
+
+  const handleDonate = () => {
+    toast({ title: "Fundraiser", description: "Redirecting to donate." });
+    router.push("/fundraising");
+  };
+
+  const handleJoinEvent = () => {
+    toast({ title: "Match center", description: "Loading the next event." });
+    router.push("/events");
+  };
+
+  const handleToggleSetting = (id: string, value: boolean) => {
+    const copy = toggleMessages[id];
+    if (copy) {
+      toast({ title: value ? copy.on : copy.off });
+    }
+  };
+
+  const handleLogout = async () => {
+    if (loading) return;
+    try {
+      setIsLoggingOut(true);
+      await logout();
+      toast({ title: "Goodbye Fan 💙", description: "You are signed out." });
+      router.replace("/onboarding");
+      router.refresh();
+    } catch (error) {
+      setIsLoggingOut(false);
+      toast({
+        title: "Logout failed",
+        description: error instanceof Error ? error.message : "Please try again.",
+        variant: "destructive",
+      });
+    }
+  };
+
+  const handleTilePress = (tile: QuickTile) => {
+    router.push(tile.href);
+  };
+
+  return (
+    <motion.main className="min-h-screen bg-rs-gradient text-white">
+      <motion.div
+        className="relative mx-auto flex min-h-screen w-full max-w-3xl flex-col gap-6 px-4 pb-28 pt-safe"
+        animate={prefersReducedMotion ? undefined : { opacity: isLoggingOut ? 0 : 1 }}
+        transition={{ duration: 0.25, ease: "easeOut" }}
+      >
+        <motion.section
+          className="card relative overflow-hidden border-white/30 bg-white/10 p-6 text-white shadow-xl"
+          initial={prefersReducedMotion ? false : { opacity: 0, y: -12 }}
+          animate={{ opacity: 1, y: 0 }}
+          transition={{ duration: 0.25, ease: "easeOut" }}
+        >
+          <div className="pointer-events-none absolute inset-0 -z-10 bg-gradient-to-br from-white/20 via-white/5 to-transparent" />
+          <div className="space-y-2">
+            <p className="text-xs uppercase tracking-widest text-white/70">Guide 5</p>
+            <h1 className="text-3xl font-black">My Account</h1>
+            <p className="text-sm text-white/80">Manage profile, wallet & settings from one premium hub.</p>
+          </div>
+        </motion.section>
+
+        <ProfileCard profile={displayProfile} membership={membership} />
+
+        <section aria-label="Quick actions" className="space-y-3">
+          <div className="flex items-center justify-between">
+            <h2 className="text-lg font-semibold">Quick access</h2>
+            <span className="text-xs uppercase tracking-wide text-white/70">Connected services</span>
+          </div>
+          <div className="grid grid-cols-2 gap-3 sm:grid-cols-3">
+            {quickTiles.map((tile) => {
+              const Icon = tileIcons[tile.icon] ?? Wallet2;
+              return (
+                <motion.button
+                  key={tile.id}
+                  type="button"
+                  onClick={() => handleTilePress(tile)}
+                  className={cn(
+                    "tile group relative flex min-h-[96px] flex-col justify-between rounded-3xl p-4 text-left text-white transition",
+                    "shadow-lg",
+                    "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent",
+                    "bg-gradient-to-br",
+                    tileGradients[tile.accent],
+                  )}
+                  aria-label={tile.ariaLabel}
+                  whileHover={prefersReducedMotion ? undefined : { scale: 1.03 }}
+                  whileTap={prefersReducedMotion ? undefined : { scale: 1.05 }}
+                  transition={prefersReducedMotion ? undefined : { duration: 0.2, ease: "easeOut" }}
+                >
+                  <span className="inline-flex h-10 w-10 items-center justify-center rounded-2xl bg-white/20 text-white">
+                    <Icon className="h-5 w-5" aria-hidden />
+                  </span>
+                  <span className="text-sm font-semibold">{tile.label}</span>
+                </motion.button>
+              );
+            })}
+          </div>
+        </section>
+
+        <section className="grid gap-4 md:grid-cols-2" aria-label="Smart finance widgets">
+          <WalletWidget wallet={wallet} onAddMoney={handleAddMoney} />
+          <MembershipWidget membership={membership} onUpgrade={handleUpgrade} />
+        </section>
+
+        <section className="grid gap-4 md:grid-cols-2" aria-label="Community widgets">
+          <FundraiserWidget fundraiser={fundraiser} onDonate={handleDonate} />
+          <EventsWidget event={event} onJoin={handleJoinEvent} />
+        </section>
+
+        <section className="space-y-3" aria-label="Preferences">
+          <div className="space-y-1">
+            <h2 className="text-lg font-semibold">Control center</h2>
+            <p className="text-sm text-white/70">Personalize language, appearance, and support options.</p>
+          </div>
+          <SettingsList groups={settings} onToggle={handleToggleSetting} onAction={(id) => id === "logout" && handleLogout()} />
+        </section>
+
+        <AnimatePresence>
+          {!isLoggingOut ? (
+            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.25 }}>
+              <FooterBrand />
+            </motion.div>
+          ) : null}
+        </AnimatePresence>
+      </motion.div>
+    </motion.main>
+  );
+}
diff --git a/app/_components/more/ProfileCard.tsx b/app/_components/more/ProfileCard.tsx
new file mode 100644
index 0000000..ab5d633
--- /dev/null
+++ b/app/_components/more/ProfileCard.tsx
@@ -0,0 +1,122 @@
+"use client";
+
+import Image from "next/image";
+import Link from "next/link";
+import { Crown, MapPin } from "lucide-react";
+import { motion, useReducedMotion, useScroll, useTransform } from "framer-motion";
+
+import type { Membership, Profile } from "@/app/_data/more";
+import { LanguageSwitcher } from "@/components/layout/LanguageSwitcher";
+import { ThemeToggle } from "@/components/layout/ThemeToggle";
+import { cn } from "@/lib/utils";
+
+const tierStyles: Record<Membership["tier"], string> = {
+  Guest: "from-white/30 to-white/10",
+  Fan: "from-sky-400/70 to-blue-500/60",
+  Gold: "from-amber-400/80 to-yellow-500/70",
+};
+
+const pointsFormatter = new Intl.NumberFormat("en-US", {
+  maximumFractionDigits: 0,
+});
+
+export type ProfileCardProps = {
+  profile: Profile;
+  membership: Membership;
+};
+
+export function ProfileCard({ profile, membership }: ProfileCardProps) {
+  const { scrollY } = useScroll();
+  const prefersReducedMotion = useReducedMotion();
+  const y = useTransform(scrollY, [0, 180], prefersReducedMotion ? [0, 0] : [0, -26]);
+  const blurFilter = useTransform(
+    scrollY,
+    [0, 180],
+    prefersReducedMotion ? ["blur(0px)", "blur(0px)"] : ["blur(0px)", "blur(8px)"]
+  );
+
+  return (
+    <motion.section
+      className="card relative isolate overflow-hidden border-white/30 bg-white/10 p-5 text-white"
+      style={{ y }}
+      aria-labelledby="more-profile-heading"
+    >
+      <motion.div
+        aria-hidden
+        className={cn(
+          "absolute inset-0 -z-10 rounded-[inherit] bg-gradient-to-br opacity-70",
+          tierStyles[membership.tier],
+        )}
+        style={{ filter: blurFilter }}
+      />
+      <div className="flex flex-col gap-4 md:flex-row md:items-center">
+        <div className="flex items-center gap-4">
+          <div className="relative h-16 w-16 shrink-0 overflow-hidden rounded-3xl border border-white/30 bg-white/10">
+            {profile.avatar ? (
+              <Image
+                src={profile.avatar}
+                alt={`${profile.name} avatar`}
+                fill
+                className="object-cover"
+                sizes="64px"
+                priority
+              />
+            ) : (
+              <div className="flex h-full w-full items-center justify-center bg-white/20 text-xl font-semibold text-rs-blue">
+                {profile.name.slice(0, 2).toUpperCase()}
+              </div>
+            )}
+          </div>
+          <div>
+            <p className="text-sm uppercase tracking-wide text-white/70">Welcome back</p>
+            <h2 id="more-profile-heading" className="text-2xl font-semibold">
+              {profile.name}
+            </h2>
+            <div className="mt-2 flex flex-wrap items-center gap-2 text-sm text-white/80">
+              <span className="inline-flex items-center gap-1 rounded-full bg-white/20 px-3 py-1">
+                <Crown className="h-4 w-4" aria-hidden />
+                {membership.tier} Member
+              </span>
+              <span className="inline-flex items-center gap-1 rounded-full bg-white/15 px-3 py-1">
+                {pointsFormatter.format(profile.points)} pts
+              </span>
+              {profile.location ? (
+                <span className="inline-flex items-center gap-1 rounded-full bg-white/10 px-3 py-1">
+                  <MapPin className="h-4 w-4" aria-hidden />
+                  {profile.location}
+                </span>
+              ) : null}
+            </div>
+          </div>
+        </div>
+        <div className="flex w-full flex-1 flex-wrap items-center justify-end gap-3">
+          <div className="flex items-center gap-2">
+            <LanguageSwitcher />
+            <ThemeToggle />
+          </div>
+          <Link
+            href="/profile"
+            className="btn-primary flex items-center justify-center px-5 py-2 text-sm font-semibold focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+            aria-label="Edit profile"
+          >
+            Edit profile
+          </Link>
+        </div>
+      </div>
+      <dl className="mt-4 grid grid-cols-1 gap-4 text-sm md:grid-cols-3">
+        <div className="rounded-2xl border border-white/20 bg-white/10 p-4">
+          <dt className="text-white/70">Membership since</dt>
+          <dd className="text-lg font-semibold">{profile.membershipSince ?? "2022"}</dd>
+        </div>
+        <div className="rounded-2xl border border-white/20 bg-white/10 p-4">
+          <dt className="text-white/70">Status</dt>
+          <dd className="text-lg font-semibold">Expires {membership.expiresOn}</dd>
+        </div>
+        <div className="rounded-2xl border border-white/20 bg-white/10 p-4">
+          <dt className="text-white/70">Perks unlocked</dt>
+          <dd className="text-lg font-semibold">{membership.benefits.length}</dd>
+        </div>
+      </dl>
+    </motion.section>
+  );
+}
diff --git a/app/_components/more/SettingsList.tsx b/app/_components/more/SettingsList.tsx
new file mode 100644
index 0000000..4c8ad58
--- /dev/null
+++ b/app/_components/more/SettingsList.tsx
@@ -0,0 +1,154 @@
+"use client";
+
+import { useMemo, useState } from "react";
+import { useRouter } from "next/navigation";
+import { AnimatePresence, motion, useReducedMotion } from "framer-motion";
+import type { LucideIcon } from "lucide-react";
+import { Bell, ChevronRight, HelpCircle, Info, Languages, LogOut, MoonStar, ShieldQuestion } from "lucide-react";
+
+import type { SettingGroup, SettingIcon } from "@/app/_data/more";
+import { Switch } from "@/components/ui/switch";
+
+const settingIcons: Record<SettingIcon, LucideIcon> = {
+  languages: Languages,
+  "moon-star": MoonStar,
+  notifications: Bell,
+  "help-circle": HelpCircle,
+  "shield-question": ShieldQuestion,
+  info: Info,
+  "log-out": LogOut,
+};
+
+export type SettingsListProps = {
+  groups: SettingGroup[];
+  onToggle?: (id: string, value: boolean) => void;
+  onAction?: (id: string) => void;
+};
+
+export function SettingsList({ groups, onToggle, onAction }: SettingsListProps) {
+  const router = useRouter();
+  const prefersReducedMotion = useReducedMotion();
+  const initialValues = useMemo(() => {
+    const defaults: Record<string, boolean> = {};
+    groups.forEach((group) => {
+      group.items.forEach((item) => {
+        if (item.type === "toggle") {
+          defaults[item.id] = item.defaultValue ?? false;
+        }
+      });
+    });
+    return defaults;
+  }, [groups]);
+
+  const [toggleState, setToggleState] = useState<Record<string, boolean>>(initialValues);
+
+  const handleToggle = (id: string, value: boolean) => {
+    setToggleState((prev) => ({ ...prev, [id]: value }));
+    onToggle?.(id, value);
+  };
+
+  const handleNavigate = (href: string | undefined) => {
+    if (!href) return;
+    router.push(href);
+  };
+
+  return (
+    <div className="space-y-6">
+      {groups.map((group) => (
+        <section key={group.id} aria-labelledby={`${group.id}-heading`} className="space-y-3">
+          <h3 id={`${group.id}-heading`} className="text-sm font-semibold uppercase tracking-wide text-white/70">
+            {group.title}
+          </h3>
+          <ul className="space-y-2">
+            <AnimatePresence initial={false}>
+              {group.items.map((item) => {
+                const Icon = settingIcons[item.icon] ?? Info;
+                if (item.type === "toggle") {
+                  const checked = toggleState[item.id] ?? item.defaultValue ?? false;
+                  return (
+                    <motion.li
+                      key={item.id}
+                      initial={prefersReducedMotion ? false : { opacity: 0, y: 8 }}
+                      animate={{ opacity: 1, y: 0 }}
+                      exit={{ opacity: 0, y: -6 }}
+                      transition={{ duration: 0.2, ease: "easeOut" }}
+                    >
+                      <motion.div
+                        role="group"
+                        tabIndex={0}
+                        className="card flex items-center gap-3 bg-white/5 p-4 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+                        whileHover={prefersReducedMotion ? undefined : { scale: 1.01 }}
+                        whileTap={prefersReducedMotion ? undefined : { scale: 0.99 }}
+                        onClick={() => handleToggle(item.id, !checked)}
+                        onKeyDown={(event) => {
+                          if (event.key === "Enter" || event.key === " ") {
+                            event.preventDefault();
+                            handleToggle(item.id, !checked);
+                          }
+                        }}
+                        aria-label={item.ariaLabel}
+                      >
+                        <span className="rounded-2xl bg-white/15 p-3 text-white">
+                          <Icon className="h-5 w-5" aria-hidden />
+                        </span>
+                        <div className="flex-1 text-left">
+                          <p className="text-sm font-semibold text-white">{item.label}</p>
+                          {item.description ? (
+                            <p className="text-xs text-white/70">{item.description}</p>
+                          ) : null}
+                        </div>
+                        <Switch
+                          id={`setting-${item.id}`}
+                          checked={checked}
+                          onClick={(event) => event.stopPropagation()}
+                          onCheckedChange={(value) => handleToggle(item.id, value)}
+                          aria-label={item.ariaLabel}
+                        />
+                      </motion.div>
+                    </motion.li>
+                  );
+                }
+
+                return (
+                  <motion.li
+                    key={item.id}
+                    initial={prefersReducedMotion ? false : { opacity: 0, y: 8 }}
+                    animate={{ opacity: 1, y: 0 }}
+                    exit={{ opacity: 0, y: -6 }}
+                    transition={{ duration: 0.2, ease: "easeOut" }}
+                  >
+                    <motion.button
+                      type="button"
+                      onClick={() => {
+                        if (item.type === "link") {
+                          handleNavigate(item.href);
+                        } else {
+                          onAction?.(item.id);
+                        }
+                      }}
+                      className="card flex w-full items-center gap-3 bg-white/5 p-4 text-left text-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+                      whileHover={prefersReducedMotion ? undefined : { scale: 1.01 }}
+                      whileTap={prefersReducedMotion ? undefined : { scale: 0.99 }}
+                      aria-label={item.ariaLabel}
+                    >
+                      <span className="rounded-2xl bg-white/15 p-3 text-white">
+                        <Icon className="h-5 w-5" aria-hidden />
+                      </span>
+                      <span className="flex-1">
+                        <p className="text-sm font-semibold">{item.label}</p>
+                        {item.description ? (
+                          <span className="text-xs text-white/70">{item.description}</span>
+                        ) : null}
+                      </span>
+                      <ChevronRight className="h-4 w-4 text-white/70" aria-hidden />
+                    </motion.button>
+                  </motion.li>
+                );
+              })}
+            </AnimatePresence>
+          </ul>
+        </section>
+      ))}
+    </div>
+  );
+}
diff --git a/app/_components/more/WalletWidget.tsx b/app/_components/more/WalletWidget.tsx
new file mode 100644
index 0000000..ab97ce7
--- /dev/null
+++ b/app/_components/more/WalletWidget.tsx
@@ -0,0 +1,73 @@
+"use client";
+
+import Link from "next/link";
+import { useRouter } from "next/navigation";
+import { motion, useReducedMotion } from "framer-motion";
+import { ArrowRight, Wallet2 } from "lucide-react";
+
+import type { Wallet } from "@/app/_data/more";
+
+const currencyFormatter = new Intl.NumberFormat("en-RW", {
+  style: "currency",
+  currency: "RWF",
+  maximumFractionDigits: 0,
+});
+
+export type WalletWidgetProps = {
+  wallet: Wallet;
+  onAddMoney?: () => void;
+};
+
+export function WalletWidget({ wallet, onAddMoney }: WalletWidgetProps) {
+  const prefersReducedMotion = useReducedMotion();
+  const router = useRouter();
+  const handleAddMoney = () => {
+    if (onAddMoney) {
+      onAddMoney();
+      return;
+    }
+    router.push("/wallet/top-up");
+  };
+
+  return (
+    <motion.section
+      className="card flex h-full flex-col justify-between gap-4 bg-white/10 text-white"
+      initial={prefersReducedMotion ? false : { opacity: 0, y: 12 }}
+      whileInView={prefersReducedMotion ? undefined : { opacity: 1, y: 0 }}
+      viewport={{ once: true, amount: 0.6 }}
+      transition={{ duration: 0.25, ease: "easeOut" }}
+      aria-labelledby="wallet-balance-heading"
+    >
+      <header className="flex items-start justify-between gap-3">
+        <div className="rounded-2xl bg-white/20 p-3">
+          <Wallet2 className="h-6 w-6" aria-hidden />
+        </div>
+        <span className="rounded-full bg-white/15 px-3 py-1 text-xs uppercase tracking-wide text-white/80">
+          Updated {new Date(wallet.lastUpdated).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
+        </span>
+      </header>
+      <div>
+        <p className="text-sm text-white/70">Wallet balance</p>
+        <p id="wallet-balance-heading" className="text-3xl font-semibold">
+          {currencyFormatter.format(wallet.balance)}
+        </p>
+      </div>
+      <div className="flex items-center justify-between gap-3">
+        <button
+          type="button"
+          onClick={handleAddMoney}
+          className="btn-primary flex-1 rounded-2xl px-4 py-3 text-sm font-semibold focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+        >
+          Add money
+        </button>
+        <Link
+          href="/wallet/history"
+          className="btn inline-flex items-center gap-1 rounded-2xl px-4 py-3 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/90 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent"
+          aria-label="View wallet history"
+        >
+          History <ArrowRight className="h-4 w-4" aria-hidden />
+        </Link>
+      </div>
+    </motion.section>
+  );
+}
diff --git a/app/_components/tickets/CheckoutCard.tsx b/app/_components/tickets/CheckoutCard.tsx
index 69b2a37..6039116 100644
--- a/app/_components/tickets/CheckoutCard.tsx
+++ b/app/_components/tickets/CheckoutCard.tsx
@@ -8,6 +8,12 @@ import { fanProfile } from "@/app/_data/fanProfile";
 type CheckoutCardProps = {
   fixture: Fixture;
   zone: TicketZone;
+  reservation:
+    | { status: "idle" }
+    | { status: "loading" }
+    | { status: "error"; message: string }
+    | { status: "success"; ticket: { id: string; paid: boolean; momo_ref: string | null; created_at: string } };
+  onRetry?: () => void;
 };
 
 const paymentMethods = [
@@ -15,7 +21,7 @@ const paymentMethods = [
   { id: "airtel", label: "Airtel Money", deeplink: "tel:*182*8*2%23" },
 ];
 
-const CheckoutCard = ({ fixture, zone }: CheckoutCardProps) => {
+const CheckoutCard = ({ fixture, zone, reservation, onRetry }: CheckoutCardProps) => {
   const [waiting, setWaiting] = useState(false);
   const [reference, setReference] = useState("");
 
@@ -30,6 +36,45 @@ const CheckoutCard = ({ fixture, zone }: CheckoutCardProps) => {
     [fixture, zone]
   );
 
+  const reservationBanner = (() => {
+    switch (reservation.status) {
+      case "loading":
+        return (
+          <div className="flex items-center gap-3 rounded-2xl border border-blue-500/40 bg-blue-500/10 px-4 py-3 text-sm text-blue-100" role="status">
+            <span className="flex h-3 w-3 animate-ping rounded-full bg-blue-300" aria-hidden />
+            <span>Reserving your seat… hold tight while we secure this ticket.</span>
+          </div>
+        );
+      case "error":
+        return (
+          <div className="flex flex-col gap-3 rounded-2xl border border-rose-400/40 bg-rose-500/10 px-4 py-3 text-sm text-rose-100" role="alert">
+            <span>{reservation.message}</span>
+            {onRetry ? (
+              <button
+                type="button"
+                className="self-start rounded-xl border border-white/20 px-3 py-2 text-xs font-semibold text-white transition hover:bg-white/20"
+                onClick={onRetry}
+              >
+                Try again
+              </button>
+            ) : null}
+          </div>
+        );
+      case "success":
+        return (
+          <div className="flex flex-col gap-1 rounded-2xl border border-emerald-400/40 bg-emerald-500/15 px-4 py-3 text-sm text-emerald-100" role="status">
+            <span className="text-sm font-semibold">Reservation confirmed</span>
+            <span>Ticket ID: {reservation.ticket.id.slice(0, 8).toUpperCase()} · Status: {reservation.ticket.paid ? "Paid" : "Awaiting payment"}</span>
+            {reservation.ticket.momo_ref ? (
+              <span className="text-xs text-emerald-100/80">Mobile money ref: {reservation.ticket.momo_ref}</span>
+            ) : null}
+          </div>
+        );
+      default:
+        return null;
+    }
+  })();
+
   return (
     <section
       aria-live="polite"
@@ -82,6 +127,8 @@ const CheckoutCard = ({ fixture, zone }: CheckoutCardProps) => {
           <span className="text-right text-white">{fanProfile.membership}</span>
         </div>
       </div>
+      {reservationBanner}
+
       <div className="space-y-3">
         <p className="text-xs uppercase tracking-[0.2em] text-white/60">Pay with Mobile Money</p>
         <div className="grid gap-3 md:grid-cols-2">
diff --git a/app/_components/ui/HeroBlock.tsx b/app/_components/ui/HeroBlock.tsx
new file mode 100644
index 0000000..141d7ff
--- /dev/null
+++ b/app/_components/ui/HeroBlock.tsx
@@ -0,0 +1,56 @@
+"use client";
+
+import { motion, useReducedMotion } from "framer-motion";
+import type { ReactNode } from "react";
+
+import { cn } from "@/lib/utils";
+
+interface HeroBlockProps {
+  title: string;
+  subtitle: string;
+  eyebrow?: string;
+  kicker?: string;
+  actions?: ReactNode;
+  className?: string;
+}
+
+const HeroBlock = ({ title, subtitle, eyebrow, kicker, actions, className }: HeroBlockProps) => {
+  const reduceMotion = useReducedMotion();
+
+  return (
+    <motion.section
+      className={cn(
+        "card relative overflow-hidden px-6 py-8 text-white",
+        "bg-gradient-to-br from-white/15 via-white/10 to-white/5",
+        className,
+      )}
+      initial={reduceMotion ? undefined : { opacity: 0, y: 24 }}
+      animate={{ opacity: 1, y: 0 }}
+      transition={{ duration: reduceMotion ? 0 : 0.25, ease: "easeOut" }}
+    >
+      <div
+        aria-hidden="true"
+        className="pointer-events-none absolute -left-24 top-0 h-64 w-64 rounded-full bg-blue-500/40 blur-3xl"
+      />
+      <div
+        aria-hidden="true"
+        className="pointer-events-none absolute right-[-60px] top-6 h-48 w-48 rounded-full bg-amber-400/35 blur-3xl"
+      />
+      <div className="relative z-10 flex flex-col gap-5">
+        {eyebrow ? (
+          <span className="w-fit rounded-full bg-white/10 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-white/70">
+            {eyebrow}
+          </span>
+        ) : null}
+        <div className="space-y-2">
+          <h1 className="text-3xl font-bold md:text-4xl">{title}</h1>
+          <p className="max-w-xl text-sm text-white/80 md:text-base">{subtitle}</p>
+        </div>
+        {actions ? <div className="flex flex-wrap gap-3">{actions}</div> : null}
+        {kicker ? <p className="text-xs uppercase tracking-wide text-white/60">{kicker}</p> : null}
+      </div>
+    </motion.section>
+  );
+};
+
+export default HeroBlock;
diff --git a/app/_data/fanProfile.ts b/app/_data/fanProfile.ts
index 35c06c0..6770606 100644
--- a/app/_data/fanProfile.ts
+++ b/app/_data/fanProfile.ts
@@ -2,12 +2,14 @@ export type FanProfile = {
   id: string;
   name: string;
   phone: string;
-  membership: "Member" | "Premium" | "Guest";
+  membership: "Member" | "Premium" | "Guest" | "Fan";
+  momo?: string;
 };
 
 export const fanProfile: FanProfile = {
-  id: "RS-2048",
-  name: "Ange Uwimana",
-  phone: "+250 788 000 111",
-  membership: "Premium",
+  id: "RS-0780000000",
+  name: "Guest Fan",
+  phone: "0780000000",
+  membership: "Fan",
+  momo: "0780000000",
 };
diff --git a/app/_data/fixtures.ts b/app/_data/fixtures.ts
index 8f5a280..d7576ac 100644
--- a/app/_data/fixtures.ts
+++ b/app/_data/fixtures.ts
@@ -1,6 +1,6 @@
 export type TicketZone = {
   id: string;
-  name: "VIP" | "Regular" | "Fan";
+  name: "VIP" | "Regular" | "Fan" | "Blue";
   price: number;
   seatsLeft: number;
   totalSeats: number;
diff --git a/app/_data/matches.ts b/app/_data/matches.ts
new file mode 100644
index 0000000..624513f
--- /dev/null
+++ b/app/_data/matches.ts
@@ -0,0 +1,386 @@
+export type MatchStatus = "upcoming" | "live" | "ft";
+
+export type MatchEventType =
+  | "goal"
+  | "card-yellow"
+  | "card-red"
+  | "substitution"
+  | "var"
+  | "info";
+
+export interface MatchEvent {
+  id: string;
+  minute: number;
+  type: MatchEventType;
+  team: "home" | "away" | "neutral";
+  player?: string;
+  description: string;
+  scoreline?: string;
+}
+
+export interface MatchStatBar {
+  id: string;
+  label: string;
+  home: number;
+  away: number;
+  unit?: "%";
+}
+
+export interface MatchLineup {
+  formation: string;
+  coach: string;
+  starters: { number: number; name: string; role?: string }[];
+  substitutes: { number: number; name: string }[];
+}
+
+export interface MatchChatMessage {
+  id: string;
+  author: string;
+  message: string;
+  timestamp: string;
+  accent?: "mod" | "highlight";
+}
+
+export interface Match {
+  id: string;
+  comp: string;
+  round: string;
+  home: string;
+  away: string;
+  venue: string;
+  date: string;
+  kickoff: string;
+  status: MatchStatus;
+  badge?: string;
+  broadcast?: string;
+  score?: { home: number; away: number };
+  liveMinute?: string;
+  events: MatchEvent[];
+  lineups?: { home: MatchLineup; away: MatchLineup };
+  stats?: MatchStatBar[];
+  timeline?: MatchEvent[];
+  chat?: MatchChatMessage[];
+}
+
+export interface HighlightClip {
+  id: string;
+  title: string;
+  duration: string;
+  published: string;
+  thumbnail: string;
+}
+
+export interface StandingsRow {
+  position: number;
+  team: string;
+  played: number;
+  wins: number;
+  draws: number;
+  losses: number;
+  goalsFor: number;
+  goalsAgainst: number;
+  goalDiff: number;
+  points: number;
+  form: ("W" | "D" | "L")[];
+}
+
+export const matches: Match[] = [
+  {
+    id: "rayon-apr",
+    comp: "Rwanda Premier League",
+    round: "Matchday 12",
+    home: "Rayon Sports",
+    away: "APR FC",
+    venue: "Kigali Pelé Stadium",
+    date: "2024-06-21",
+    kickoff: "2024-06-21T18:00:00+02:00",
+    status: "live",
+    badge: "RPL",
+    broadcast: "Flash TV",
+    score: { home: 2, away: 1 },
+    liveMinute: "58'",
+    events: [
+      {
+        id: "rayon-apr-35-goal",
+        minute: 35,
+        type: "goal",
+        team: "home",
+        player: "E. Mugisha",
+        description: "Left-footed shot from inside the box",
+        scoreline: "1-0",
+      },
+      {
+        id: "rayon-apr-42-card",
+        minute: 42,
+        type: "card-yellow",
+        team: "away",
+        player: "S. Niyonkuru",
+        description: "Late challenge on the wing",
+      },
+      {
+        id: "rayon-apr-52-goal",
+        minute: 52,
+        type: "goal",
+        team: "away",
+        player: "F. Mugiraneza",
+        description: "Header from set piece",
+        scoreline: "1-1",
+      },
+      {
+        id: "rayon-apr-56-goal",
+        minute: 56,
+        type: "goal",
+        team: "home",
+        player: "J. Ndayishimiye",
+        description: "Volley after rebound",
+        scoreline: "2-1",
+      },
+      {
+        id: "rayon-apr-57-var",
+        minute: 57,
+        type: "var",
+        team: "neutral",
+        description: "VAR check for handball complete — goal stands",
+      },
+    ],
+    lineups: {
+      home: {
+        formation: "4-3-3",
+        coach: "Yves Rwasamanzi",
+        starters: [
+          { number: 1, name: "Kimenyi Yves", role: "GK" },
+          { number: 2, name: "B. Muvunyi" },
+          { number: 3, name: "E. Kwizera" },
+          { number: 5, name: "K. Bayisenge" },
+          { number: 19, name: "A. Nshimiyimana" },
+          { number: 6, name: "H. Ndayisenga" },
+          { number: 8, name: "S. Mugenzi" },
+          { number: 14, name: "J. Muhire" },
+          { number: 7, name: "E. Mugisha" },
+          { number: 11, name: "J. Ndayishimiye" },
+          { number: 23, name: "C. Shauri" },
+        ],
+        substitutes: [
+          { number: 30, name: "H. Kwizera" },
+          { number: 4, name: "D. Manzi" },
+          { number: 10, name: "M. Bizimana" },
+          { number: 17, name: "P. Usengimana" },
+          { number: 24, name: "T. Iradukunda" },
+        ],
+      },
+      away: {
+        formation: "4-2-3-1",
+        coach: "Thierry Froger",
+        starters: [
+          { number: 16, name: "N. Rwabugiri", role: "GK" },
+          { number: 22, name: "J. Nshimiyimana" },
+          { number: 4, name: "B. Kagere" },
+          { number: 5, name: "S. Niyonkuru" },
+          { number: 3, name: "A. Byiringiro" },
+          { number: 6, name: "E. Manishimwe" },
+          { number: 8, name: "J. Niyonzima" },
+          { number: 10, name: "F. Mugiraneza" },
+          { number: 11, name: "D. Sugira" },
+          { number: 17, name: "A. Nshuti" },
+          { number: 9, name: "S. Ishimwe" },
+        ],
+        substitutes: [
+          { number: 1, name: "E. Ndizeye" },
+          { number: 12, name: "E. Omborenga" },
+          { number: 18, name: "P. Rukundo" },
+          { number: 19, name: "E. Byiringiro" },
+          { number: 21, name: "J. Nshuti" },
+        ],
+      },
+    },
+    stats: [
+      { id: "possession", label: "Possession", home: 58, away: 42, unit: "%" },
+      { id: "shots", label: "Total shots", home: 12, away: 7 },
+      { id: "shots-on-target", label: "On target", home: 6, away: 3 },
+      { id: "xg", label: "xG-lite", home: 1.7, away: 0.9 },
+      { id: "passes", label: "Accurate passes", home: 312, away: 268 },
+    ],
+    timeline: [
+      {
+        id: "rayon-apr-12-info",
+        minute: 12,
+        type: "info",
+        team: "neutral",
+        description: "Rayon controlling early possession",
+      },
+      {
+        id: "rayon-apr-35-goal",
+        minute: 35,
+        type: "goal",
+        team: "home",
+        player: "E. Mugisha",
+        description: "Slides in at the far post after a sweeping move",
+        scoreline: "1-0",
+      },
+      {
+        id: "rayon-apr-42-card",
+        minute: 42,
+        type: "card-yellow",
+        team: "away",
+        player: "S. Niyonkuru",
+        description: "Booked for a late tackle",
+      },
+      {
+        id: "rayon-apr-52-goal",
+        minute: 52,
+        type: "goal",
+        team: "away",
+        player: "F. Mugiraneza",
+        description: "Powerful header levelled the game",
+        scoreline: "1-1",
+      },
+      {
+        id: "rayon-apr-56-goal",
+        minute: 56,
+        type: "goal",
+        team: "home",
+        player: "J. Ndayishimiye",
+        description: "Thunderous volley restores the lead",
+        scoreline: "2-1",
+      },
+    ],
+    chat: [
+      {
+        id: "chat-1",
+        author: "Aline",
+        message: "Mugisha on fire tonight!",
+        timestamp: "57'",
+        accent: "highlight",
+      },
+      {
+        id: "chat-2",
+        author: "Patrick",
+        message: "Keep pushing boys, defence needs to tighten up!",
+        timestamp: "55'",
+      },
+      {
+        id: "chat-3",
+        author: "Moderator",
+        message: "Reminder: Be respectful in the chat. Offensive language will be removed.",
+        timestamp: "HT",
+        accent: "mod",
+      },
+    ],
+  },
+  {
+    id: "rayon-gicumbi",
+    comp: "Rwanda Premier League",
+    round: "Matchday 13",
+    home: "Gicumbi FC",
+    away: "Rayon Sports",
+    venue: "Stade de Gicumbi",
+    date: "2024-06-28",
+    kickoff: "2024-06-28T15:00:00+02:00",
+    status: "upcoming",
+    badge: "RPL",
+    broadcast: "RS TV",
+    events: [],
+  },
+  {
+    id: "rayon-police",
+    comp: "Rwanda Premier League",
+    round: "Matchday 11",
+    home: "Police FC",
+    away: "Rayon Sports",
+    venue: "Bugesera Stadium",
+    date: "2024-06-14",
+    kickoff: "2024-06-14T19:30:00+02:00",
+    status: "ft",
+    badge: "RPL",
+    score: { home: 1, away: 1 },
+    events: [
+      {
+        id: "police-rayon-21-goal",
+        minute: 21,
+        type: "goal",
+        team: "home",
+        player: "E. Twizerimana",
+        description: "Low driven finish inside the box",
+        scoreline: "1-0",
+      },
+      {
+        id: "police-rayon-69-goal",
+        minute: 69,
+        type: "goal",
+        team: "away",
+        player: "C. Shauri",
+        description: "Calm penalty into the corner",
+        scoreline: "1-1",
+      },
+    ],
+    timeline: [
+      {
+        id: "police-rayon-21-goal",
+        minute: 21,
+        type: "goal",
+        team: "home",
+        player: "E. Twizerimana",
+        description: "Opens the scoring for Police",
+        scoreline: "1-0",
+      },
+      {
+        id: "police-rayon-45-info",
+        minute: 45,
+        type: "info",
+        team: "neutral",
+        description: "Halftime whistle: Rayon trail but dominate possession",
+      },
+      {
+        id: "police-rayon-69-goal",
+        minute: 69,
+        type: "goal",
+        team: "away",
+        player: "C. Shauri",
+        description: "Levels from the spot",
+        scoreline: "1-1",
+      },
+    ],
+    chat: [
+      {
+        id: "chat-police-1",
+        author: "Diane",
+        message: "Great away support today!",
+        timestamp: "FT",
+      },
+    ],
+  },
+];
+
+export const highlightClips: HighlightClip[] = [
+  {
+    id: "clip-1",
+    title: "Mugisha rockets Rayon into the lead",
+    duration: "0:36",
+    published: "2 minutes ago",
+    thumbnail: "/media/highlights/mugisha-volley.jpg",
+  },
+  {
+    id: "clip-2",
+    title: "Inside the stadium: fans in full voice",
+    duration: "0:45",
+    published: "8 minutes ago",
+    thumbnail: "/media/highlights/fans-celebrate.jpg",
+  },
+  {
+    id: "clip-3",
+    title: "Shauri's equaliser vs Police FC",
+    duration: "0:52",
+    published: "Yesterday",
+    thumbnail: "/media/highlights/shauri-penalty.jpg",
+  },
+];
+
+export const leagueTable: StandingsRow[] = [
+  { position: 1, team: "APR FC", played: 12, wins: 8, draws: 3, losses: 1, goalsFor: 22, goalsAgainst: 9, goalDiff: 13, points: 27, form: ["W", "W", "D", "W", "L"] },
+  { position: 2, team: "Rayon Sports", played: 11, wins: 7, draws: 3, losses: 1, goalsFor: 21, goalsAgainst: 11, goalDiff: 10, points: 24, form: ["D", "W", "W", "W", "D"] },
+  { position: 3, team: "Police FC", played: 12, wins: 6, draws: 4, losses: 2, goalsFor: 18, goalsAgainst: 12, goalDiff: 6, points: 22, form: ["D", "W", "D", "W", "L"] },
+  { position: 4, team: "Musanze FC", played: 12, wins: 6, draws: 3, losses: 3, goalsFor: 17, goalsAgainst: 14, goalDiff: 3, points: 21, form: ["W", "L", "W", "D", "W"] },
+  { position: 5, team: "Etincelles", played: 12, wins: 5, draws: 4, losses: 3, goalsFor: 15, goalsAgainst: 12, goalDiff: 3, points: 19, form: ["L", "W", "D", "W", "D"] },
+];
+
+export const matchFeedUpdatedAt = new Date().toISOString();
diff --git a/app/_data/more.ts b/app/_data/more.ts
new file mode 100644
index 0000000..d1491bc
--- /dev/null
+++ b/app/_data/more.ts
@@ -0,0 +1,244 @@
+export type Profile = {
+  id: string;
+  name: string;
+  avatar?: string;
+  tier: "Guest" | "Fan" | "Gold";
+  points: number;
+  membershipSince?: string;
+  location?: string;
+};
+
+export type Wallet = {
+  balance: number;
+  currency: "RWF";
+  lastUpdated: string;
+};
+
+export type Membership = {
+  tier: "Guest" | "Fan" | "Gold";
+  expiresOn: string;
+  benefits: string[];
+};
+
+export type Fundraiser = {
+  title: string;
+  goal: number;
+  progress: number;
+  description?: string;
+};
+
+export type Event = {
+  title: string;
+  date: string;
+  time: string;
+  venue: string;
+  description?: string;
+};
+
+export type QuickTileIcon = "wallet" | "tickets" | "shop" | "community" | "fundraising" | "events";
+
+export type QuickTile = {
+  id: string;
+  label: string;
+  href: string;
+  icon: QuickTileIcon;
+  accent: "blue" | "green" | "yellow" | "pink" | "teal" | "purple";
+  ariaLabel: string;
+};
+
+export type SettingIcon =
+  | "languages"
+  | "moon-star"
+  | "notifications"
+  | "help-circle"
+  | "shield-question"
+  | "info"
+  | "log-out";
+
+export type SettingItem = {
+  id: string;
+  label: string;
+  description?: string;
+  icon: SettingIcon;
+  ariaLabel: string;
+  type: "link" | "toggle" | "action";
+  href?: string;
+  defaultValue?: boolean;
+};
+
+export type SettingGroup = {
+  id: string;
+  title: string;
+  items: SettingItem[];
+};
+
+export const profile: Profile = {
+  id: "fan-204",
+  name: "Marie Uwase",
+  avatar: "/placeholder.svg",
+  tier: "Gold",
+  points: 14850,
+  membershipSince: "2022",
+  location: "Kigali, Rwanda",
+};
+
+export const wallet: Wallet = {
+  balance: 485000,
+  currency: "RWF",
+  lastUpdated: new Date().toISOString(),
+};
+
+export const membership: Membership = {
+  tier: "Gold",
+  expiresOn: "2024-12-31",
+  benefits: ["Priority tickets", "Merch drops", "Partner rewards"],
+};
+
+export const fundraiser: Fundraiser = {
+  title: "Academy Future Stars Fund",
+  goal: 5000000,
+  progress: 0.62,
+  description: "Equip our youth academy with smart performance tracking.",
+};
+
+export const upcomingEvent: Event = {
+  title: "Rayon Sports vs APR FC",
+  date: "Sat, 16 Nov",
+  time: "18:30 CAT",
+  venue: "Kigali Pelé Stadium",
+  description: "League showdown under the lights",
+};
+
+export const quickTiles: QuickTile[] = [
+  {
+    id: "wallet",
+    label: "Wallet",
+    href: "/wallet",
+    icon: "wallet",
+    accent: "blue",
+    ariaLabel: "Open wallet",
+  },
+  {
+    id: "tickets",
+    label: "My Tickets",
+    href: "/tickets",
+    icon: "tickets",
+    accent: "yellow",
+    ariaLabel: "View my tickets",
+  },
+  {
+    id: "shop",
+    label: "Shop",
+    href: "/shop",
+    icon: "shop",
+    accent: "purple",
+    ariaLabel: "Open club shop",
+  },
+  {
+    id: "community",
+    label: "Community",
+    href: "/community",
+    icon: "community",
+    accent: "teal",
+    ariaLabel: "Visit fan community",
+  },
+  {
+    id: "fundraising",
+    label: "Fundraising",
+    href: "/fundraising",
+    icon: "fundraising",
+    accent: "pink",
+    ariaLabel: "Support fundraising",
+  },
+  {
+    id: "events",
+    label: "Events",
+    href: "/events",
+    icon: "events",
+    accent: "green",
+    ariaLabel: "Explore club events",
+  },
+];
+
+export const settings: SettingGroup[] = [
+  {
+    id: "preferences",
+    title: "Preferences",
+    items: [
+      {
+        id: "language",
+        label: "Language",
+        description: "Switch between Kinyarwanda, English, and French",
+        icon: "languages",
+        ariaLabel: "Change language",
+        type: "link",
+        href: "/settings/language",
+      },
+      {
+        id: "theme",
+        label: "Liquid glass theme",
+        description: "Match device theme automatically",
+        icon: "moon-star",
+        ariaLabel: "Toggle dark theme",
+        type: "toggle",
+        defaultValue: true,
+      },
+      {
+        id: "notifications",
+        label: "Smart notifications",
+        description: "Game reminders & payment alerts",
+        icon: "notifications",
+        ariaLabel: "Toggle smart notifications",
+        type: "toggle",
+        defaultValue: true,
+      },
+    ],
+  },
+  {
+    id: "support",
+    title: "Support",
+    items: [
+      {
+        id: "help",
+        label: "Help Center",
+        description: "Chat with our concierge team",
+        icon: "help-circle",
+        ariaLabel: "Open help center",
+        type: "link",
+        href: "/support",
+      },
+      {
+        id: "safety",
+        label: "Safety & privacy",
+        description: "Control data sharing and biometrics",
+        icon: "shield-question",
+        ariaLabel: "Manage privacy",
+        type: "link",
+        href: "/settings/privacy",
+      },
+    ],
+  },
+  {
+    id: "about",
+    title: "About",
+    items: [
+      {
+        id: "app-info",
+        label: "App info",
+        description: "Version notes & release history",
+        icon: "info",
+        ariaLabel: "View app info",
+        type: "link",
+        href: "/settings/about",
+      },
+      {
+        id: "logout",
+        label: "Log out",
+        description: "Sign out of your Rayon Sports account",
+        icon: "log-out",
+        ariaLabel: "Log out",
+        type: "action",
+      },
+    ],
+  },
+];
diff --git a/app/_lib/api.ts b/app/_lib/api.ts
new file mode 100644
index 0000000..d764f8c
--- /dev/null
+++ b/app/_lib/api.ts
@@ -0,0 +1,34 @@
+export type JsonFetchOptions = RequestInit & { skipJson?: boolean };
+
+const baseUrl = process.env.NEXT_PUBLIC_BACKEND_URL?.replace(/\/$/, "") ?? "";
+
+export const buildApiUrl = (path: string) => {
+  if (path.startsWith("http")) return path;
+  const normalized = path.startsWith("/") ? path : `/${path}`;
+  return `${baseUrl}${normalized}`;
+};
+
+export async function jsonFetch<T = unknown>(path: string, init?: JsonFetchOptions): Promise<T> {
+  const url = buildApiUrl(path);
+  const headers = new Headers(init?.headers);
+  if (!headers.has("Content-Type")) {
+    headers.set("Content-Type", "application/json");
+  }
+  const response = await fetch(url, { ...init, headers });
+  if (!response.ok) {
+    let message = response.statusText;
+    try {
+      const body = await response.json();
+      if (typeof body?.error === "string") {
+        message = body.error;
+      }
+    } catch (error) {
+      console.warn("Failed to parse error payload", error);
+    }
+    throw new Error(message || "Request failed");
+  }
+  if (init?.skipJson) {
+    return undefined as T;
+  }
+  return (await response.json()) as T;
+}
diff --git a/app/api/community/posts/route.ts b/app/api/community/posts/route.ts
new file mode 100644
index 0000000..960c00f
--- /dev/null
+++ b/app/api/community/posts/route.ts
@@ -0,0 +1,103 @@
+import { NextResponse } from "next/server";
+import { createClient } from "@supabase/supabase-js";
+
+const supabase = () =>
+  createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY ?? process.env.SUPABASE_ANON_KEY!, {
+    auth: { persistSession: false },
+  });
+
+type PostPayload = {
+  user_id?: string;
+  user?: {
+    name?: string;
+    phone?: string;
+    momo_number?: string;
+    avatar_url?: string | null;
+  };
+  text: string;
+  media_url?: string | null;
+};
+
+type FanPostRecord = {
+  id: string;
+  text: string | null;
+  media_url: string | null;
+  likes: number | null;
+  comments: number | null;
+  created_at: string;
+  user: {
+    id: string;
+    name: string | null;
+    phone: string | null;
+    avatar_url: string | null;
+  } | null;
+};
+
+async function resolveUserId(db: ReturnType<typeof supabase>, payload: PostPayload) {
+  if (payload.user_id) return payload.user_id;
+  const rawPhone = payload.user?.phone?.replace(/\s+/g, "");
+  if (!rawPhone) return null;
+  const { data: existing } = await db
+    .from("users")
+    .select("id, avatar_url")
+    .eq("phone", rawPhone)
+    .maybeSingle();
+  if (existing?.id) {
+    if (payload.user?.avatar_url && !existing.avatar_url) {
+      await db.from("users").update({ avatar_url: payload.user.avatar_url }).eq("id", existing.id);
+    }
+    return existing.id;
+  }
+  const { data: created, error } = await db
+    .from("users")
+    .insert({
+      phone: rawPhone,
+      name: payload.user?.name ?? null,
+      momo_number: payload.user?.momo_number ?? rawPhone,
+      avatar_url: payload.user?.avatar_url ?? null,
+    })
+    .select("id")
+    .single();
+  if (error) throw error;
+  return created.id;
+}
+
+export async function GET() {
+  const db = supabase();
+  const { data, error } = await db
+    .from("fan_posts")
+    .select("*, user:users(id, name, phone, avatar_url)")
+    .order("created_at", { ascending: false })
+    .limit(40);
+  if (error) {
+    return NextResponse.json({ error: error.message }, { status: 500 });
+  }
+  return NextResponse.json((data ?? []) as FanPostRecord[]);
+}
+
+export async function POST(req: Request) {
+  const db = supabase();
+  const payload = (await req.json()) as PostPayload;
+  if (!payload.text || !payload.text.trim()) {
+    return NextResponse.json({ error: "Post text is required" }, { status: 400 });
+  }
+  try {
+    const userId = await resolveUserId(db, payload);
+    const { data, error } = await db
+      .from("fan_posts")
+      .insert({
+        user_id: userId,
+        text: payload.text.trim().slice(0, 500),
+        media_url: payload.media_url ?? null,
+      })
+      .select("*, user:users(id, name, phone, avatar_url)")
+      .single();
+    if (error) {
+      return NextResponse.json({ error: error.message }, { status: 500 });
+    }
+    return NextResponse.json({ ok: true, post: data as FanPostRecord });
+  } catch (error) {
+    const message = error instanceof Error ? error.message : "Unknown error";
+    return NextResponse.json({ error: message }, { status: 500 });
+  }
+}
diff --git a/app/api/matches/route.ts b/app/api/matches/route.ts
index 82ec76f..bdecbe4 100644
--- a/app/api/matches/route.ts
+++ b/app/api/matches/route.ts
@@ -1,88 +1,33 @@
-import { NextRequest } from 'next/server';
-import { getSupabase } from '../_lib/supabase';
-import { errorResponse, successResponse } from '../_lib/responses';
-
-export async function GET(req: NextRequest) {
-  const supabase = getSupabase();
-  const status = req.nextUrl.searchParams.get('status');
-
-  let query = supabase.from('matches').select('*').order('date', { ascending: true });
-  if (status && ['upcoming', 'live', 'ft'].includes(status)) {
-    query = query.eq('status', status as 'upcoming' | 'live' | 'ft');
-  }
-
-  const { data, error } = await query;
-  if (error) {
-    return errorResponse(error.message, 500);
-  }
-
-  const matchIds = (data ?? []).map((match) => match.id).filter(Boolean) as string[];
-  let ticketCounts: Record<string, Record<string, number>> = {};
-  if (matchIds.length > 0) {
-    const { data: tickets, error: ticketsError } = await supabase
-      .from('tickets')
-      .select('match_id, zone, paid')
-      .in('match_id', matchIds);
-    if (ticketsError) {
-      return errorResponse(ticketsError.message, 500);
-    }
-    ticketCounts = (tickets ?? []).reduce((acc, ticket) => {
-      if (!ticket.match_id) {
-        return acc;
-      }
-      const matchMap = acc[ticket.match_id] ?? {};
-      const zoneKey = ticket.zone ?? 'Regular';
-      const current = matchMap[zoneKey] ?? 0;
-      return {
-        ...acc,
-        [ticket.match_id]: {
-          ...matchMap,
-          [zoneKey]: current + 1,
-        },
-      };
-    }, {} as Record<string, Record<string, number>>);
-  }
-
-  const enriched = (data ?? []).map((match) => {
-    const zoneTotals = {
-      VIP: {
-        total: match.seats_vip ?? 0,
-        price: match.vip_price ?? 0,
-        label: 'VIP',
-      },
-      Regular: {
-        total: match.seats_regular ?? 0,
-        price: match.regular_price ?? 0,
-        label: 'Regular',
-      },
-      Blue: {
-        total: match.seats_blue ?? 0,
-        price: match.blue_price ?? match.regular_price ?? 0,
-        label: 'Fan Zone',
-      },
-    } as const;
-
-    const sold = ticketCounts[match.id] ?? {};
-    const zones = (Object.entries(zoneTotals) as [keyof typeof zoneTotals, (typeof zoneTotals)[keyof typeof zoneTotals]][]).map(
-      ([zoneKey, details]) => {
-        const soldCount = sold[zoneKey] ?? 0;
-        const seatsLeft = Math.max(details.total - soldCount, 0);
-        return {
-          id: `${match.id}-${zoneKey.toLowerCase()}`,
-          zone: zoneKey,
-          name: details.label,
-          price: details.price,
-          totalSeats: details.total,
-          seatsLeft,
-        };
-      },
-    );
-
-    return {
-      ...match,
-      zones,
-    };
+import { NextResponse } from "next/server";
+
+// Match centre data is sourced from local fixtures defined in `/app/_data/matches`.
+// This API returns a snapshot of the current match centre including match summaries,
+// highlight clips, standings table and the last updated timestamp.  It mirrors
+// the behaviour introduced in PR #4 while co‑existing with the legacy tickets
+// API which now lives under `/api/matches/tickets`.
+import {
+  highlightClips,
+  leagueTable,
+  matches,
+  matchFeedUpdatedAt,
+} from "@/app/_data/matches";
+
+export const runtime = "edge";
+
+/**
+ * Returns the current match centre feed as JSON.
+ *
+ * The response includes:
+ *  - `matches`: a list of Match objects summarising upcoming and live fixtures.
+ *  - `highlights`: an array of highlight clips.
+ *  - `standings`: the current league table.
+ *  - `updatedAt`: an ISO date string indicating when the feed was last updated.
+ */
+export async function GET() {
+  return NextResponse.json({
+    matches,
+    highlights: highlightClips,
+    standings: leagueTable,
+    updatedAt: matchFeedUpdatedAt,
   });
-
-  return successResponse(enriched);
-}
+}
\ No newline at end of file
diff --git a/app/api/matches/tickets/route.ts b/app/api/matches/tickets/route.ts
new file mode 100644
index 0000000..82ec76f
--- /dev/null
+++ b/app/api/matches/tickets/route.ts
@@ -0,0 +1,88 @@
+import { NextRequest } from 'next/server';
+import { getSupabase } from '../_lib/supabase';
+import { errorResponse, successResponse } from '../_lib/responses';
+
+export async function GET(req: NextRequest) {
+  const supabase = getSupabase();
+  const status = req.nextUrl.searchParams.get('status');
+
+  let query = supabase.from('matches').select('*').order('date', { ascending: true });
+  if (status && ['upcoming', 'live', 'ft'].includes(status)) {
+    query = query.eq('status', status as 'upcoming' | 'live' | 'ft');
+  }
+
+  const { data, error } = await query;
+  if (error) {
+    return errorResponse(error.message, 500);
+  }
+
+  const matchIds = (data ?? []).map((match) => match.id).filter(Boolean) as string[];
+  let ticketCounts: Record<string, Record<string, number>> = {};
+  if (matchIds.length > 0) {
+    const { data: tickets, error: ticketsError } = await supabase
+      .from('tickets')
+      .select('match_id, zone, paid')
+      .in('match_id', matchIds);
+    if (ticketsError) {
+      return errorResponse(ticketsError.message, 500);
+    }
+    ticketCounts = (tickets ?? []).reduce((acc, ticket) => {
+      if (!ticket.match_id) {
+        return acc;
+      }
+      const matchMap = acc[ticket.match_id] ?? {};
+      const zoneKey = ticket.zone ?? 'Regular';
+      const current = matchMap[zoneKey] ?? 0;
+      return {
+        ...acc,
+        [ticket.match_id]: {
+          ...matchMap,
+          [zoneKey]: current + 1,
+        },
+      };
+    }, {} as Record<string, Record<string, number>>);
+  }
+
+  const enriched = (data ?? []).map((match) => {
+    const zoneTotals = {
+      VIP: {
+        total: match.seats_vip ?? 0,
+        price: match.vip_price ?? 0,
+        label: 'VIP',
+      },
+      Regular: {
+        total: match.seats_regular ?? 0,
+        price: match.regular_price ?? 0,
+        label: 'Regular',
+      },
+      Blue: {
+        total: match.seats_blue ?? 0,
+        price: match.blue_price ?? match.regular_price ?? 0,
+        label: 'Fan Zone',
+      },
+    } as const;
+
+    const sold = ticketCounts[match.id] ?? {};
+    const zones = (Object.entries(zoneTotals) as [keyof typeof zoneTotals, (typeof zoneTotals)[keyof typeof zoneTotals]][]).map(
+      ([zoneKey, details]) => {
+        const soldCount = sold[zoneKey] ?? 0;
+        const seatsLeft = Math.max(details.total - soldCount, 0);
+        return {
+          id: `${match.id}-${zoneKey.toLowerCase()}`,
+          zone: zoneKey,
+          name: details.label,
+          price: details.price,
+          totalSeats: details.total,
+          seatsLeft,
+        };
+      },
+    );
+
+    return {
+      ...match,
+      zones,
+    };
+  });
+
+  return successResponse(enriched);
+}
diff --git a/app/cart/CartClientPage.tsx b/app/cart/CartClientPage.tsx
index ba2f7af..880671f 100644
--- a/app/cart/CartClientPage.tsx
+++ b/app/cart/CartClientPage.tsx
@@ -12,6 +12,8 @@ import {
   type CopyKey,
 } from "@/app/(routes)/shop/_hooks/useShopLocale";
 import { formatPrice, useCart } from "@/app/(routes)/shop/_logic/useShop";
+import { jsonFetch } from "@/app/_lib/api";
+import { fanProfile } from "@/app/_data/fanProfile";
 
 const PROMO_CODES: Record<string, { percentOff: number; description: string }> = {
   FANS10: { percentOff: 0.1, description: "Members save 10%" },
@@ -29,11 +31,14 @@ const CartClientPage = ({ initialLocale }: CartClientPageProps) => (
 
 const CartContent = () => {
   const { items, total, updateItem, removeItem, clear, changeVariant } = useCart();
-  const [phone, setPhone] = useState("0780000000");
+  const [phone, setPhone] = useState(fanProfile.phone);
   const [promoInput, setPromoInput] = useState("");
   const [promoError, setPromoError] = useState<"empty" | "invalid" | null>(null);
   const [appliedPromo, setAppliedPromo] = useState<{ code: string; percentOff: number; description: string } | null>(null);
   const [capturedReference, setCapturedReference] = useState<string | null>(null);
+  const [orderSaving, setOrderSaving] = useState(false);
+  const [orderResult, setOrderResult] = useState<{ id: string; status: string } | null>(null);
+  const [orderError, setOrderError] = useState<string | null>(null);
   const { t } = useShopLocale();
   const promoPlaceholder = t("cart.promoPlaceholder");
   const phonePlaceholder = t("cart.phonePlaceholder");
@@ -53,6 +58,49 @@ const CartContent = () => {
 
   const amountDue = Math.max(total - discount, 0);
 
+  useEffect(() => {
+    setOrderResult(null);
+    setOrderError(null);
+  }, [items.length]);
+
+  const submitOrder = async (reference: string) => {
+    if (items.length === 0 || amountDue <= 0) {
+      return;
+    }
+    setOrderSaving(true);
+    setOrderError(null);
+    try {
+      const sanitizedPhone = phone.replace(/[^0-9+]/g, "");
+      const payload = {
+        total: amountDue,
+        momo_ref: reference,
+        user: {
+          name: fanProfile.name,
+          phone: sanitizedPhone || fanProfile.phone,
+          momo_number: fanProfile.momo ?? sanitizedPhone || fanProfile.phone,
+        },
+        items: items.map((item) => ({
+          product_id: item.product.id,
+          product_name: item.product.name,
+          qty: item.qty,
+          price: item.variant.price,
+        })),
+      };
+      const response = await jsonFetch<{
+        ok: boolean;
+        order: { id: string; status: string };
+      }>("/api/shop/orders", {
+        method: "POST",
+        body: JSON.stringify(payload),
+      });
+      setOrderResult(response.order);
+    } catch (error) {
+      setOrderError(error instanceof Error ? error.message : "Failed to submit order");
+    } finally {
+      setOrderSaving(false);
+    }
+  };
+
   const handleApplyPromo = () => {
     const code = promoInput.trim().toUpperCase();
     if (!code) {
@@ -352,7 +400,12 @@ const CartContent = () => {
           <UssdPayButton
             amount={amountDue}
             phoneNumber={phone}
-            onReferenceCaptured={(reference) => setCapturedReference(reference)}
+            onReferenceCaptured={(reference) => {
+              setCapturedReference(reference);
+              setOrderResult(null);
+              setOrderError(null);
+              void submitOrder(reference);
+            }}
           />
         )}
 
@@ -362,10 +415,29 @@ const CartContent = () => {
               {t("cart.referenceNotice").primary}: <span className="font-semibold text-white">{capturedReference}</span>.
               <span className="block text-[10px] text-white/60">{t("cart.referenceNotice").secondary}</span>
             </p>
+            {orderSaving ? (
+              <p className="text-[11px] text-white/70" role="status" aria-live="polite">
+                Submitting order…
+              </p>
+            ) : orderResult ? (
+              <p className="text-[11px] text-emerald-200" role="status" aria-live="polite">
+                Order {orderResult.id.slice(0, 8).toUpperCase()} saved. Status: {orderResult.status}.
+              </p>
+            ) : null}
+            {orderError ? (
+              <p className="text-[11px] text-amber-200" role="status" aria-live="polite">
+                {orderError}
+              </p>
+            ) : null}
             <button
               type="button"
-              onClick={() => setCapturedReference(null)}
-              className="self-start text-white/60 underline min-h-[44px]"
+              onClick={() => {
+                setCapturedReference(null);
+                setOrderResult(null);
+                setOrderError(null);
+              }}
+              className="self-start text-white/60 underline min-h-[44px] disabled:opacity-50"
+              disabled={orderSaving}
             >
               {t("cart.referenceClear").primary}
               <span className="block text-[10px] text-white/50">{t("cart.referenceClear").secondary}</span>
diff --git a/app/community/CommunityClient.tsx b/app/community/CommunityClient.tsx
index 9acdd7a..9bd5499 100644
--- a/app/community/CommunityClient.tsx
+++ b/app/community/CommunityClient.tsx
@@ -1,6 +1,13 @@
 "use client";
 
-import { type KeyboardEvent, type PropsWithChildren, useMemo, useState } from "react";
+import {
+  type FormEvent,
+  type KeyboardEvent,
+  type PropsWithChildren,
+  useEffect,
+  useMemo,
+  useState,
+} from "react";
 import Image from "next/image";
 import { AnimatePresence, motion, useReducedMotion } from "framer-motion";
 
@@ -21,14 +28,72 @@ import {
   mockPolls,
   mockPosts,
   mockWeeklyLeaders,
+  type Post,
   type Clip,
 } from "@/app/_data/community";
+import { fanProfile } from "@/app/_data/fanProfile";
+import { jsonFetch } from "@/app/_lib/api";
+import { useToast } from "@/components/ui/use-toast";
 
 const tabs = ["Feed", "Leaderboard", "Fan Clubs", "Polls"] as const;
 
 type TabKey = (typeof tabs)[number];
 type ThreadState = { type: "post" | "clip"; id: string; title: string } | null;
 
+type FanPostRecord = {
+  id: string;
+  text: string | null;
+  media_url: string | null;
+  likes: number | null;
+  comments: number | null;
+  created_at: string;
+  user: { id: string; name: string | null; avatar_url: string | null } | null;
+};
+
+const fallbackAvatar = "/community/avatars/guest.png";
+
+const formatRelativeTime = (value?: string | null) => {
+  if (!value) return "now";
+  const timestamp = Date.parse(value);
+  if (Number.isNaN(timestamp)) return "now";
+  const diff = Date.now() - timestamp;
+  if (diff <= 45_000) return "now";
+  const minute = 60_000;
+  const hour = minute * 60;
+  const day = hour * 24;
+  if (diff < hour) {
+    const minutes = Math.max(1, Math.floor(diff / minute));
+    return `${minutes}m`;
+  }
+  if (diff < day) {
+    const hours = Math.max(1, Math.floor(diff / hour));
+    return `${hours}h`;
+  }
+  const days = Math.max(1, Math.floor(diff / day));
+  if (days < 7) {
+    return `${days}d`;
+  }
+  const weeks = Math.max(1, Math.floor(days / 7));
+  if (weeks < 5) {
+    return `${weeks}w`;
+  }
+  const months = Math.max(1, Math.floor(days / 30));
+  return `${months}mo`;
+};
+
+const mapFanPost = (record: FanPostRecord): Post => ({
+  id: record.id,
+  user: record.user?.name?.trim() || "Rayon Fan",
+  avatar: record.user?.avatar_url || fallbackAvatar,
+  text: record.text ?? "",
+  media: record.media_url ?? undefined,
+  likes: record.likes ?? 0,
+  comments: record.comments ?? 0,
+  time: formatRelativeTime(record.created_at),
+});
+
+const composerMaxLength = 280;
+
 type HeroBlockProps = {
   title: string;
   subtitle: string;
@@ -155,13 +220,61 @@ const ClipsCarousel = ({ clips, onOpenComments }: { clips: Clip[]; onOpenComment
 };
 
 const CommunityClient = () => {
+  const { toast } = useToast();
   const [activeTab, setActiveTab] = useState<TabKey>("Feed");
   const [openThread, setOpenThread] = useState<ThreadState>(null);
+  const [feedPosts, setFeedPosts] = useState<Post[]>(mockPosts);
+  const [feedLoading, setFeedLoading] = useState(false);
+  const [feedError, setFeedError] = useState<string | null>(null);
+  const [composerText, setComposerText] = useState("");
+  const [posting, setPosting] = useState(false);
+  const [postError, setPostError] = useState<string | null>(null);
 
   const badgeGroups = useMemo(() => mockBadges.slice(0, 3), []);
 
+  useEffect(() => {
+    let subscribed = true;
+    const loadPosts = async () => {
+      setFeedLoading(true);
+      try {
+        const records = await jsonFetch<FanPostRecord[]>("/api/community/posts");
+        if (!subscribed) {
+          return;
+        }
+        if (Array.isArray(records) && records.length) {
+          const remotePosts = records
+            .map(mapFanPost)
+            .filter((post) => post.text.trim().length > 0);
+          if (remotePosts.length) {
+            const fallback = mockPosts.filter((mock) => !remotePosts.some((post) => post.id === mock.id));
+            setFeedPosts([...remotePosts, ...fallback]);
+          }
+        }
+        setFeedError(null);
+      } catch (error) {
+        if (!subscribed) {
+          return;
+        }
+        console.error("Failed to load fan posts", error);
+        setFeedError(error instanceof Error ? error.message : "Unable to load community feed");
+      } finally {
+        if (subscribed) {
+          setFeedLoading(false);
+        }
+      }
+    };
+    loadPosts();
+    return () => {
+      subscribed = false;
+    };
+  }, []);
+
+  const composerRemaining = composerMaxLength - composerText.length;
+  const composerDisabled =
+    posting || !composerText.trim() || composerText.trim().length > composerMaxLength;
+
   const handleOpenPost = (postId: string) => {
-    const post = mockPosts.find((item) => item.id === postId);
+    const post = feedPosts.find((item) => item.id === postId) ?? mockPosts.find((item) => item.id === postId);
     setOpenThread({
       type: "post",
       id: postId,
@@ -169,6 +282,44 @@ const CommunityClient = () => {
     });
   };
 
+  const handleComposerSubmit = async (event: FormEvent<HTMLFormElement>) => {
+    event.preventDefault();
+    const message = composerText.trim();
+    if (!message) {
+      setPostError("Share a chant or update before posting.");
+      return;
+    }
+    if (message.length > composerMaxLength) {
+      setPostError(`Keep your chant under ${composerMaxLength} characters.`);
+      return;
+    }
+    setPostError(null);
+    setPosting(true);
+    try {
+      const response = await jsonFetch<{ ok: boolean; post: FanPostRecord }>("/api/community/posts", {
+        method: "POST",
+        body: JSON.stringify({
+          text: message,
+          user: {
+            name: fanProfile.name,
+            phone: fanProfile.phone,
+            momo_number: fanProfile.momo ?? fanProfile.phone,
+            avatar_url: fallbackAvatar,
+          },
+        }),
+      });
+      const newPost = mapFanPost(response.post);
+      setFeedPosts((current) => [newPost, ...current.filter((item) => item.id !== newPost.id)]);
+      setComposerText("");
+      toast({ title: "Posted to feed", description: "Your chant is now live for Rayon fans." });
+    } catch (error) {
+      console.error("Failed to publish post", error);
+      setPostError(error instanceof Error ? error.message : "Unable to publish post");
+    } finally {
+      setPosting(false);
+    }
+  };
+
   const handleOpenClip = (clip: Clip) => {
     setOpenThread({
       type: "clip",
@@ -233,11 +384,89 @@ const CommunityClient = () => {
 
         <div>
           {activeTab === "Feed" ? (
-            <WidgetRow>
-              {mockPosts.map((post) => (
-                <PostCard key={post.id} {...post} onOpenComments={handleOpenPost} />
-              ))}
-            </WidgetRow>
+            <div className="space-y-4">
+              <section className="card space-y-4 text-white" aria-labelledby="composer-heading">
+                <div className="flex items-center gap-3">
+                  <Image
+                    src={fallbackAvatar}
+                    alt=""
+                    width={48}
+                    height={48}
+                    className="h-12 w-12 rounded-full object-cover"
+                  />
+                  <div>
+                    <h3 id="composer-heading" className="text-lg font-semibold">
+                      Start a chant
+                    </h3>
+                    <p className="text-xs text-white/70">Share matchday energy with thousands of Gikundiro fans.</p>
+                  </div>
+                </div>
+                <form onSubmit={handleComposerSubmit} className="space-y-3">
+                  <label className="text-sm font-semibold text-white/80" htmlFor="community-composer">
+                    What's happening?
+                  </label>
+                  <textarea
+                    id="community-composer"
+                    value={composerText}
+                    onChange={(event) => {
+                      if (postError) {
+                        setPostError(null);
+                      }
+                      setComposerText(event.target.value);
+                    }}
+                    placeholder="Rayon is taking over Kigali Stadium tonight..."
+                    className="min-h-[140px] w-full rounded-3xl border border-white/20 bg-white/10 px-4 py-3 text-sm text-white placeholder:text-white/60 focus:outline-none focus:ring-2 focus:ring-white/70"
+                    aria-label="Share a community update"
+                  />
+                  <div className="flex flex-wrap items-center justify-between gap-3">
+                    <span className={`text-xs ${composerRemaining < 0 ? "text-rose-200" : "text-white/60"}`} aria-live="polite">
+                      {composerRemaining >= 0
+                        ? `${composerRemaining} characters left`
+                        : `${Math.abs(composerRemaining)} over the limit`}
+                    </span>
+                    <button
+                      type="submit"
+                      className="btn-primary min-h-[44px] rounded-xl px-5 py-3 text-sm font-semibold disabled:cursor-not-allowed disabled:opacity-60"
+                      disabled={composerDisabled}
+                    >
+                      {posting ? "Posting…" : "Post to feed"}
+                    </button>
+                  </div>
+                  {postError ? (
+                    <p className="text-xs text-rose-200" role="status" aria-live="polite">
+                      {postError}
+                    </p>
+                  ) : null}
+                </form>
+              </section>
+              {feedLoading ? (
+                <div
+                  className="rounded-3xl border border-white/10 bg-white/10 p-4 text-xs text-white/70"
+                  role="status"
+                  aria-live="polite"
+                >
+                  Syncing live chants…
+                </div>
+              ) : null}
+              {feedPosts.length ? (
+                <WidgetRow>
+                  {feedPosts.map((post) => (
+                    <PostCard key={post.id} {...post} onOpenComments={handleOpenPost} />
+                  ))}
+                </WidgetRow>
+              ) : (
+                <EmptyState
+                  title="Be the first to post"
+                  description="Share a chant to kick off the community conversation."
+                  icon="📣"
+                />
+              )}
+              {feedError ? (
+                <p className="text-xs text-amber-200" role="status" aria-live="polite">
+                  {feedError}. Showing cached chants.
+                </p>
+              ) : null}
+            </div>
           ) : null}
 
           {activeTab === "Leaderboard" ? (
diff --git a/app/matchday/page.tsx b/app/matchday/page.tsx
index 77f01e4..67e0843 100644
--- a/app/matchday/page.tsx
+++ b/app/matchday/page.tsx
@@ -1,6 +1,7 @@
 "use client";
 
 import { useCallback, useMemo, useState } from "react";
+import { useRouter } from "next/navigation";
 
 import ActionRail from "@/app/_components/matchday/ActionRail";
 import FanChat from "@/app/_components/matchday/FanChat";
@@ -27,6 +28,7 @@ import {
 const tabs = ["Highlights", "Timeline", "Stats", "Line-ups", "H2H", "Chat"] as const;
 
 const MatchdayPage = () => {
+  const router = useRouter();
   const [activeTab, setActiveTab] = useState<(typeof tabs)[number]>("Highlights");
   const [activeClip, setActiveClip] = useState<typeof highlightClips[number] | null>(
     null,
@@ -52,9 +54,21 @@ const MatchdayPage = () => {
     setActiveClip(null);
   }, []);
 
-  const handleAction = useCallback((label: string) => {
-    console.info(`Action selected: ${label}`);
-  }, []);
+  const handleTickets = useCallback(() => {
+    router.push("/tickets");
+  }, [router]);
+
+  const handleShop = useCallback(() => {
+    router.push("/shop");
+  }, [router]);
+
+  const handleDonate = useCallback(() => {
+    router.push("/services?focus=sacco");
+  }, [router]);
+
+  const handlePredict = useCallback(() => {
+    router.push("/community");
+  }, [router]);
 
   return (
     <main className="mx-auto flex max-w-4xl flex-col gap-6 px-4 pb-24 pt-6 text-white">
@@ -84,10 +98,10 @@ const MatchdayPage = () => {
       </SegmentedTabs>
 
       <ActionRail
-        onPredict={() => handleAction("Predict")}
-        onTickets={() => handleAction("Tickets")}
-        onShop={() => handleAction("Shop")}
-        onDonate={() => handleAction("Donate")}
+        onPredict={handlePredict}
+        onTickets={handleTickets}
+        onShop={handleShop}
+        onDonate={handleDonate}
       />
     </main>
   );
diff --git a/app/matches/MatchesClient.tsx b/app/matches/MatchesClient.tsx
new file mode 100644
index 0000000..7bd5137
--- /dev/null
+++ b/app/matches/MatchesClient.tsx
@@ -0,0 +1,388 @@
+"use client";
+
+import Link from "next/link";
+import { useCallback, useEffect, useMemo, useRef, useState, type RefObject } from "react";
+import { motion, useReducedMotion } from "framer-motion";
+
+import TopAppBar from "@/app/_components/ui/TopAppBar";
+import EmptyState from "@/app/_components/ui/EmptyState";
+import HeroBlock from "@/app/_components/ui/HeroBlock";
+import LiveTicker, { type LiveTickerEvent } from "@/app/_components/match/LiveTicker";
+import MatchCard from "@/app/_components/match/MatchCard";
+import MatchDetailSheet from "@/app/_components/match/MatchDetailSheet";
+import HighlightsCarousel from "@/app/_components/match/HighlightsCarousel";
+import StandingsTable from "@/app/_components/match/StandingsTable";
+import type { HighlightClip, Match, StandingsRow } from "@/app/_data/matches";
+
+type MatchCentreFeed = {
+  matches: Match[];
+  highlights: HighlightClip[];
+  standings: StandingsRow[];
+  updatedAt?: string;
+};
+
+type MatchesClientProps = {
+  matches: Match[];
+  highlights: HighlightClip[];
+  standings: StandingsRow[];
+};
+
+const MatchesClient = ({ matches, highlights, standings }: MatchesClientProps) => {
+  const reduceMotion = useReducedMotion();
+  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);
+  const [detailOpen, setDetailOpen] = useState(false);
+  const [feed, setFeed] = useState<MatchCentreFeed>({
+    matches,
+    highlights,
+    standings,
+  });
+  const [lastUpdated, setLastUpdated] = useState<string | undefined>(undefined);
+  const [isOffline, setIsOffline] = useState<boolean>(() =>
+    typeof navigator !== "undefined" ? !navigator.onLine : false,
+  );
+
+  const liveMatches = useMemo(
+    () => feed.matches.filter((match) => match.status === "live"),
+    [feed.matches],
+  );
+  const upcomingMatches = useMemo(
+    () => feed.matches.filter((match) => match.status === "upcoming"),
+    [feed.matches],
+  );
+  const finishedMatches = useMemo(
+    () => feed.matches.filter((match) => match.status === "ft"),
+    [feed.matches],
+  );
+
+  const tickerEvents = useMemo<LiveTickerEvent[]>(() => {
+    if (liveMatches.length === 0) {
+      return [];
+    }
+
+    return liveMatches.flatMap((match) =>
+      match.events.map((event) => ({
+        ...event,
+        matchId: match.id,
+        fixture: `${match.home} ${match.score ? match.score.home : "-"}-${match.score ? match.score.away : "-"} ${match.away}`,
+        status: match.status,
+        currentScore: event.scoreline ?? (match.score ? `${match.score.home}-${match.score.away}` : undefined),
+      })),
+    );
+  }, [liveMatches]);
+
+  const liveSectionRef = useRef<HTMLDivElement>(null);
+  const upcomingSectionRef = useRef<HTMLDivElement>(null);
+  const resultsSectionRef = useRef<HTMLDivElement>(null);
+
+  const lastSyncLabel = useMemo(() => {
+    const updatedIso = lastUpdated ?? feed.updatedAt;
+    if (!updatedIso) return null;
+    const updatedDate = new Date(updatedIso);
+    if (Number.isNaN(updatedDate.getTime())) return null;
+
+    const diffMs = Date.now() - updatedDate.getTime();
+    const minutes = Math.floor(diffMs / 60000);
+    if (minutes < 1) return "just now";
+    if (minutes === 1) return "1 minute ago";
+    if (minutes < 60) return `${minutes} minutes ago`;
+
+    const hours = Math.floor(minutes / 60);
+    if (hours === 1) return "1 hour ago";
+    if (hours < 24) return `${hours} hours ago`;
+
+    const days = Math.floor(hours / 24);
+    return days === 1 ? "1 day ago" : `${days} days ago`;
+  }, [feed.updatedAt, lastUpdated]);
+
+  const heroKicker = useMemo(() => {
+    const base =
+      liveMatches.length > 0
+        ? `${liveMatches.length} live fixture${liveMatches.length > 1 ? "s" : ""} updating every 30s`
+        : "No live fixtures right now — previews start 60 minutes before kick-off";
+
+    return lastSyncLabel ? `${base} • Last sync ${lastSyncLabel}` : base;
+  }, [lastSyncLabel, liveMatches.length]);
+
+  const scrollToSection = (ref: RefObject<HTMLElement>) => {
+    if (ref.current) {
+      ref.current.scrollIntoView({ behavior: reduceMotion ? "auto" : "smooth", block: "start" });
+      ref.current.focus({ preventScroll: true });
+    }
+  };
+
+  const openMatchDetail = (match: Match) => {
+    setSelectedMatch(match);
+    setDetailOpen(true);
+  };
+
+  const handleCloseDetail = () => {
+    setDetailOpen(false);
+    window.setTimeout(() => {
+      setSelectedMatch(null);
+    }, reduceMotion ? 0 : 200);
+  };
+
+  useEffect(() => {
+    if (!detailOpen) {
+      return;
+    }
+
+    const body = document.querySelector("body");
+    if (!body) return;
+    body.style.overflow = "hidden";
+    return () => {
+      body.style.overflow = "";
+    };
+  }, [detailOpen]);
+
+  useEffect(() => {
+    if (!feed.matches.length) {
+      setFeed({ matches, highlights, standings });
+    }
+  }, [feed.matches.length, highlights, matches, standings]);
+
+  const applyFeedUpdate = useCallback((payload: MatchCentreFeed) => {
+    setFeed({
+      matches: payload.matches ?? matches,
+      highlights: payload.highlights ?? highlights,
+      standings: payload.standings ?? standings,
+      updatedAt: payload.updatedAt,
+    });
+    setLastUpdated(payload.updatedAt);
+
+    if (typeof window !== "undefined") {
+      window.localStorage.setItem("rs-match-centre-feed", JSON.stringify(payload));
+    }
+  }, [highlights, matches, standings]);
+
+  useEffect(() => {
+    if (typeof window === "undefined") {
+      return undefined;
+    }
+
+    const cached = window.localStorage.getItem("rs-match-centre-feed");
+    if (cached) {
+      try {
+        const parsed = JSON.parse(cached) as MatchCentreFeed;
+        if (parsed.matches?.length) {
+          applyFeedUpdate(parsed);
+        }
+      } catch (error) {
+        console.warn("Failed to parse cached match centre feed", error);
+      }
+    }
+
+    const handleOnline = () => setIsOffline(false);
+    const handleOffline = () => setIsOffline(true);
+
+    window.addEventListener("online", handleOnline);
+    window.addEventListener("offline", handleOffline);
+
+    return () => {
+      window.removeEventListener("online", handleOnline);
+      window.removeEventListener("offline", handleOffline);
+    };
+  }, [applyFeedUpdate]);
+
+  useEffect(() => {
+    let cancelled = false;
+
+    const fetchFeed = async () => {
+      try {
+        const response = await fetch("/api/matches", { cache: "no-store" });
+        if (!response.ok) {
+          throw new Error(`Failed to fetch feed (${response.status})`);
+        }
+
+        const payload = (await response.json()) as MatchCentreFeed;
+        if (!cancelled) {
+          applyFeedUpdate(payload);
+          setIsOffline(false);
+        }
+      } catch (error) {
+        if (!cancelled) {
+          setIsOffline(true);
+        }
+        console.warn("Unable to refresh match centre feed", error);
+      }
+    };
+
+    fetchFeed();
+    const interval = window.setInterval(fetchFeed, 30000);
+
+    return () => {
+      cancelled = true;
+      window.clearInterval(interval);
+    };
+  }, [applyFeedUpdate]);
+
+  return (
+    <div className="min-h-screen bg-rs-gradient text-white">
+      <TopAppBar />
+      <motion.main
+        className="mx-auto flex w-full max-w-5xl flex-col gap-8 px-4 pb-24 pt-6"
+        initial={reduceMotion ? undefined : { opacity: 0, y: 32 }}
+        animate={{ opacity: 1, y: 0 }}
+        transition={{ duration: reduceMotion ? 0 : 0.25, ease: "easeOut" }}
+      >
+        <HeroBlock
+          eyebrow="Matchday hub"
+          title="Match Centre"
+          subtitle="Live scores, stats & fan chat wrapped in Rayon&apos;s glass matchday atmosphere. Scroll for fixtures, highlights and the league table."
+          kicker={heroKicker}
+          actions={
+            <>
+              {liveMatches.length > 0 ? (
+                <span className="chip bg-emerald-500/20 text-emerald-100">{liveMatches.length} live</span>
+              ) : null}
+              <button className="btn-primary" onClick={() => scrollToSection(liveSectionRef)}>
+                Live now
+              </button>
+              <button className="btn" onClick={() => scrollToSection(upcomingSectionRef)}>
+                Upcoming
+              </button>
+              <button className="btn" onClick={() => scrollToSection(resultsSectionRef)}>
+                Results
+              </button>
+            </>
+          }
+        />
+
+        {isOffline ? (
+          <div className="glass flex items-center gap-3 rounded-2xl border border-white/10 bg-white/5 px-4 py-3 text-sm text-white/80">
+            <span aria-hidden="true">📶</span>
+            <p>
+              Offline mode — showing the latest saved data. We&apos;ll resync automatically when your connection returns.
+            </p>
+          </div>
+        ) : null}
+
+        {tickerEvents.length > 0 ? (
+          <LiveTicker events={tickerEvents} />
+        ) : (
+          <EmptyState
+            title="No live matches now — View upcoming fixtures or replays."
+            description="Scroll to upcoming fixtures for ticket links or jump into the highlights reel."
+            icon="⏱️"
+          />
+        )}
+
+        <section
+          ref={liveSectionRef}
+          tabIndex={-1}
+          aria-labelledby="live-now-heading"
+          className="space-y-4"
+        >
+          <div className="flex items-center justify-between">
+            <h2 id="live-now-heading" className="section-title">
+              Live now
+            </h2>
+            <span className="text-xs uppercase tracking-wide text-white/60">
+              Auto-refreshing every 30s
+            </span>
+          </div>
+          {liveMatches.length === 0 ? (
+            <EmptyState
+              title="No live matches"
+              description="We&apos;ll light up this space the moment Rayon walk out."
+              icon="🎉"
+            />
+          ) : (
+            <div className="flex gap-4 overflow-x-auto pb-2" role="list">
+              {liveMatches.map((match) => (
+                <MatchCard
+                  key={match.id}
+                  match={match}
+                  onSelect={openMatchDetail}
+                  isActive={detailOpen && selectedMatch?.id === match.id}
+                />
+              ))}
+            </div>
+          )}
+        </section>
+
+        <section className="space-y-4">
+          <div className="flex items-center justify-between">
+            <h2 className="section-title">Highlights & media</h2>
+            <Link href="/community" className="text-sm font-semibold text-white/80 underline">
+              More stories
+            </Link>
+          </div>
+          <HighlightsCarousel clips={feed.highlights} />
+        </section>
+
+        <section
+          ref={upcomingSectionRef}
+          tabIndex={-1}
+          aria-labelledby="upcoming-heading"
+          className="space-y-4"
+        >
+          <div className="flex items-center justify-between">
+            <h2 id="upcoming-heading" className="section-title">
+              Upcoming fixtures
+            </h2>
+            <Link href="/tickets" className="text-sm font-semibold text-white/80 underline">
+              View tickets
+            </Link>
+          </div>
+          {upcomingMatches.length === 0 ? (
+            <EmptyState
+              title="Fixtures to be confirmed"
+              description="Once the federation releases new dates we&apos;ll drop them here."
+              icon="📅"
+            />
+          ) : (
+            <div className="flex gap-4 overflow-x-auto pb-2" role="list">
+              {upcomingMatches.map((match) => (
+                <MatchCard
+                  key={match.id}
+                  match={match}
+                  onSelect={openMatchDetail}
+                  isActive={detailOpen && selectedMatch?.id === match.id}
+                />
+              ))}
+            </div>
+          )}
+        </section>
+
+        <section
+          ref={resultsSectionRef}
+          tabIndex={-1}
+          aria-labelledby="results-heading"
+          className="space-y-4"
+        >
+          <div className="flex items-center justify-between">
+            <h2 id="results-heading" className="section-title">
+              Recent results
+            </h2>
+            <span className="text-xs uppercase tracking-wide text-white/60">Last 3 matches</span>
+          </div>
+          {finishedMatches.length === 0 ? (
+            <EmptyState
+              title="No recent results"
+              description="Rayon return to action soon. Meanwhile, explore classic replays in the media hub."
+              icon="📺"
+            />
+          ) : (
+            <div className="grid gap-4 md:grid-cols-2" role="list">
+              {finishedMatches.map((match) => (
+                <MatchCard
+                  key={match.id}
+                  match={match}
+                  onSelect={openMatchDetail}
+                  isActive={detailOpen && selectedMatch?.id === match.id}
+                />
+              ))}
+            </div>
+          )}
+        </section>
+
+        <StandingsTable table={feed.standings} updatedAt={lastUpdated ?? feed.updatedAt} />
+      </motion.main>
+
+      <MatchDetailSheet open={detailOpen} match={selectedMatch} onClose={handleCloseDetail} />
+    </div>
+  );
+};
+
+export default MatchesClient;
diff --git a/app/matches/page.tsx b/app/matches/page.tsx
new file mode 100644
index 0000000..cdee0f8
--- /dev/null
+++ b/app/matches/page.tsx
@@ -0,0 +1,12 @@
+import { buildRouteMetadata } from "@/app/_lib/navigation";
+
+import MatchesClient from "./MatchesClient";
+import { highlightClips, leagueTable, matches } from "@/app/_data/matches";
+
+export const metadata = buildRouteMetadata("/matches");
+
+const MatchesPage = () => (
+  <MatchesClient matches={matches} highlights={highlightClips} standings={leagueTable} />
+);
+
+export default MatchesPage;
diff --git a/app/more/page.tsx b/app/more/page.tsx
new file mode 100644
index 0000000..791aff4
--- /dev/null
+++ b/app/more/page.tsx
@@ -0,0 +1,27 @@
+import { buildRouteMetadata } from "@/app/_lib/navigation";
+import { MoreDashboard } from "@/app/_components/more/MoreDashboard";
+import {
+  fundraiser as mockFundraiser,
+  membership as mockMembership,
+  profile as mockProfile,
+  quickTiles as mockQuickTiles,
+  settings as mockSettings,
+  upcomingEvent as mockUpcomingEvent,
+  wallet as mockWallet,
+} from "@/app/_data/more";
+
+export const metadata = buildRouteMetadata("/more");
+
+const MorePage = () => (
+  <MoreDashboard
+    profile={mockProfile}
+    wallet={mockWallet}
+    membership={mockMembership}
+    fundraiser={mockFundraiser}
+    event={mockUpcomingEvent}
+    quickTiles={mockQuickTiles}
+    settings={mockSettings}
+  />
+);
+
+export default MorePage;
diff --git a/app/mytickets/page.tsx b/app/mytickets/page.tsx
index 6cf229f..7b97e5f 100644
--- a/app/mytickets/page.tsx
+++ b/app/mytickets/page.tsx
@@ -143,6 +143,8 @@ const MyTicketsPage = () => {
     }
   };
 
+  const orderedTickets = useMemo(() => tickets, [tickets]);
+
   return (
     <main className="min-h-screen bg-rs-gradient pb-24">
       <div className="mx-auto flex w-full max-w-5xl flex-col gap-8 px-4 py-8">
@@ -175,19 +177,16 @@ const MyTicketsPage = () => {
             />
           ) : (
             <div className="space-y-4" role="list">
-              {walletTickets.map(({ order, fixture, zone }, index) =>
-                fixture ? (
-                  <TicketWalletCard
-                    key={order.id}
-                    fixture={fixture}
-                    order={order}
-                    zone={zone}
-                    animationDelay={index * 0.08}
-                  />
-                ) : null
-              )}
+              {orderedTickets.map((ticket, index) => (
+                <TicketWalletCard key={ticket.id} ticket={ticket} animationDelay={index * 0.08} />
+              ))}
             </div>
           )}
+          {error ? (
+            <p className="text-xs text-amber-200" role="status" aria-live="polite">
+              {error}
+            </p>
+          ) : null}
         </section>
       </div>
     </main>
diff --git a/app/shop/page.tsx b/app/shop/page.tsx
index 9fd4879..917cc17 100644
--- a/app/shop/page.tsx
+++ b/app/shop/page.tsx
@@ -1,12 +1,70 @@
 import { buildRouteMetadata } from "@/app/_lib/navigation";
-import { shopData } from "@/app/_data/shop_v2";
+import { shopData, type Product } from "@/app/_data/shop_v2";
 
 import ShopExperience from "./ShopExperience";
 
 export const metadata = buildRouteMetadata("/shop");
 
-const ShopPage = () => {
-  return <ShopExperience data={shopData} />;
+const slugify = (value: string) =>
+  value
+    .toLowerCase()
+    .replace(/[^a-z0-9]+/g, "-")
+    .replace(/(^-|-$)/g, "")
+    .trim();
+
+type SupabaseProduct = {
+  id: string;
+  name: string | null;
+  category: string | null;
+  price: number | null;
+  description: string | null;
+  image_url: string | null;
+  badge: string | null;
+};
+
+const mapRemoteProduct = (record: SupabaseProduct): Product => {
+  const fallbackImage = "/shop/home1.png";
+  return {
+    id: record.id,
+    name: record.name ?? "Rayon Merch",
+    slug: slugify(record.name ?? record.id ?? "product"),
+    images: record.image_url ? [record.image_url] : [fallbackImage],
+    price: Number(record.price) || 0,
+    badges: record.badge ? [record.badge as Product["badges"][number]] : undefined,
+    description: record.description ?? undefined,
+    category:
+      typeof record.category === "string"
+        ? record.category.charAt(0).toUpperCase() + record.category.slice(1)
+        : "Accessories",
+  } satisfies Product;
+};
+
+const fetchProducts = async (): Promise<Product[]> => {
+  const base = process.env.NEXT_PUBLIC_BACKEND_URL?.replace(/\/$/, "") ?? "";
+  const endpoint = `${base}/api/shop/products`;
+  try {
+    const response = await fetch(endpoint, { next: { revalidate: 60 } });
+    if (!response.ok) {
+      return [];
+    }
+    const payload = (await response.json()) as SupabaseProduct[] | unknown;
+    if (!Array.isArray(payload)) {
+      return [];
+    }
+    return payload.map((entry) => mapRemoteProduct(entry as SupabaseProduct));
+  } catch (error) {
+    console.error("Failed to fetch shop products", error);
+    return [];
+  }
+};
+
+const ShopPage = async () => {
+  const remoteProducts = await fetchProducts();
+  const mergedData = {
+    ...shopData,
+    products: remoteProducts.length ? remoteProducts : shopData.products,
+  };
+  return <ShopExperience data={mergedData} />;
 };
 
 export default ShopPage;
diff --git a/app/tickets/page.tsx b/app/tickets/page.tsx
index 5a0382d..adc6b47 100644
--- a/app/tickets/page.tsx
+++ b/app/tickets/page.tsx
@@ -27,7 +27,8 @@ const TicketsPage = () => {
     let isMounted = true;
     const loadMatches = async () => {
       try {
-        const response = await fetch("/api/matches");
+        // Fetch ticketing fixtures from the dedicated tickets endpoint.
+        const response = await fetch("/api/matches/tickets");
         if (!response.ok) {
           throw new Error(await response.text());
         }
@@ -107,6 +108,40 @@ const TicketsPage = () => {
     }
   }, [searchParams]);
 
+  useEffect(() => {
+    let mounted = true;
+    const load = async () => {
+      try {
+        const data = await jsonFetch<ApiMatch[]>("/api/matches");
+        if (!mounted) return;
+        if (!Array.isArray(data) || data.length === 0) {
+          setFixtures(fallbackFixtures);
+          setLoadError(null);
+          return;
+        }
+        setFixtures(data.map(buildFixtureFromMatch));
+        setLoadError(null);
+      } catch (error) {
+        console.error("Failed to load matches", error);
+        if (!mounted) return;
+        setLoadError(error instanceof Error ? error.message : "Unable to load fixtures");
+        setFixtures(fallbackFixtures);
+      } finally {
+        if (mounted) {
+          setLoadingFixtures(false);
+        }
+      }
+    };
+    load();
+    return () => {
+      mounted = false;
+    };
+  }, []);
+
+  useEffect(() => {
+    setReservation({ status: "idle" });
+  }, [selectedFixture?.id]);
+
   const filteredFixtures = useMemo(() => {
     if (activeTab === "upcoming") {
       return fixtures.filter((fixture) => fixture.status === "upcoming");
@@ -125,6 +160,41 @@ const TicketsPage = () => {
     setActiveTab(tabId);
   };
 
+  const scrollToCheckout = () => {
+    const checkoutAnchor = document.getElementById("checkout-panel");
+    if (checkoutAnchor) {
+      checkoutAnchor.scrollIntoView({ behavior: "smooth", block: "start" });
+    }
+  };
+
+  const reserveTicket = async (fixture: Fixture, zone: TicketZone) => {
+    setReservation({ status: "loading" });
+    try {
+      const response = await jsonFetch<{
+        ok: boolean;
+        ticket: { id: string; paid: boolean; momo_ref: string | null; created_at: string };
+      }>("/api/tickets", {
+        method: "POST",
+        body: JSON.stringify({
+          match_id: fixture.id,
+          zone: normaliseZoneName(zone.name),
+          price: zone.price,
+          user: {
+            name: fanProfile.name,
+            phone: fanProfile.phone,
+            momo_number: fanProfile.momo ?? fanProfile.phone,
+          },
+        }),
+      });
+      setReservation({ status: "success", ticket: response.ticket });
+    } catch (error) {
+      setReservation({
+        status: "error",
+        message: error instanceof Error ? error.message : "Failed to reserve ticket",
+      });
+    }
+  };
+
   const handleFixtureSelect = (fixture: Fixture) => {
     setSelectedFixture(fixture);
     setSelectedZone(null);
@@ -134,9 +204,9 @@ const TicketsPage = () => {
   const handleZoneSelect = (zone: TicketZone) => {
     setSelectedZone(zone);
     setIsSheetOpen(false);
-    const checkoutAnchor = document.getElementById("checkout-panel");
-    if (checkoutAnchor) {
-      checkoutAnchor.scrollIntoView({ behavior: "smooth", block: "start" });
+    scrollToCheckout();
+    if (selectedFixture) {
+      reserveTicket(selectedFixture, zone);
     }
   };
 
@@ -185,10 +255,20 @@ const TicketsPage = () => {
               ))}
             </div>
           )}
+          {loadError ? (
+            <p className="text-xs text-amber-200" role="status" aria-live="polite">
+              {loadError}. Showing cached fixtures.
+            </p>
+          ) : null}
         </section>
         <section aria-live="polite" aria-atomic="true" role="region" aria-label="Checkout summary">
           {selectedFixture && selectedZone ? (
-            <CheckoutCard fixture={selectedFixture} zone={selectedZone} />
+            <CheckoutCard
+              fixture={selectedFixture}
+              zone={selectedZone}
+              reservation={reservation}
+              onRetry={() => selectedFixture && selectedZone && reserveTicket(selectedFixture, selectedZone)}
+            />
           ) : (
             <div className="card space-y-3 bg-white/5 text-white/80">
               <h3 className="text-base font-semibold text-white">Your selection</h3>
diff --git a/src/views/PartnerServicesView.tsx b/src/views/PartnerServicesView.tsx
index 26fa88e..7c84d10 100644
--- a/src/views/PartnerServicesView.tsx
+++ b/src/views/PartnerServicesView.tsx
@@ -35,6 +35,8 @@ import {
 import { Checkbox } from "@/components/ui/checkbox";
 import { useToast } from "@/components/ui/use-toast";
 import { launchUssdDialer } from "@/lib/ussd";
+import { fanProfile } from "@/app/_data/fanProfile";
+import { jsonFetch } from "@/app/_lib/api";
 import {
   activePolicy,
   bankInsights,
@@ -77,12 +79,21 @@ const getTicketEligibility = (total: number) => ({
     : `Add ${formatCurrency(25000 - total)} more to unlock a free Blue Zone ticket.`,
 });
 
-const InsuranceStatus = ({ status }: { status: "idle" | "pending" | "confirmed" }) => {
+const InsuranceStatus = ({
+  status,
+  quoteId,
+}: {
+  status: "idle" | "pending" | "confirmed";
+  quoteId?: string | null;
+}) => {
   switch (status) {
     case "pending":
       return (
         <span className="inline-flex items-center gap-2 text-sm text-white/80" aria-live="polite" role="status">
           <Loader2 className="h-4 w-4 animate-spin" /> Waiting for SMS confirmation…
+          {quoteId ? (
+            <span className="text-xs text-white/60">Quote {quoteId.slice(0, 8).toUpperCase()}</span>
+          ) : null}
         </span>
       );
     case "confirmed":
@@ -100,7 +111,13 @@ const InsuranceStatus = ({ status }: { status: "idle" | "pending" | "confirmed"
   }
 };
 
-const DepositStatus = ({ status }: { status: "idle" | "pending" | "confirmed" }) => {
+const DepositStatus = ({
+  status,
+  reference,
+}: {
+  status: "idle" | "pending" | "confirmed";
+  reference?: string | null;
+}) => {
   switch (status) {
     case "pending":
       return (
@@ -112,6 +129,7 @@ const DepositStatus = ({ status }: { status: "idle" | "pending" | "confirmed" })
       return (
         <span className="inline-flex items-center gap-2 text-sm text-emerald-200" aria-live="polite" role="status">
           <CheckCircle2 className="h-4 w-4" /> Deposit confirmed. Points have been credited.
+          {reference ? <span className="text-xs text-emerald-100/80">Ref {reference}</span> : null}
         </span>
       );
     default:
@@ -284,6 +302,7 @@ const PartnerServicesView = () => {
   );
   const [depositAmount, setDepositAmount] = useState<number>(latestDeposit.amount);
   const [depositStatus, setDepositStatus] = useState<"idle" | "pending" | "confirmed">("idle");
+  const [depositSaving, setDepositSaving] = useState(false);
   const [manualDepositRef, setManualDepositRef] = useState("");
   const [showDepositFallback, setShowDepositFallback] = useState(false);
   const [dismissedDepositOverlay, setDismissedDepositOverlay] = useState(false);
@@ -382,21 +401,15 @@ const PartnerServicesView = () => {
   }, [searchParams]);
 
   useEffect(() => {
-    if (insuranceStatus === "pending") {
-      const timer = window.setTimeout(() => setInsuranceStatus("confirmed"), 7000);
-      return () => window.clearTimeout(timer);
+    if (insuranceStatus !== "pending") {
+      setDismissedInsuranceOverlay(false);
     }
-    setDismissedInsuranceOverlay(false);
-    return undefined;
   }, [insuranceStatus]);
 
   useEffect(() => {
-    if (depositStatus === "pending") {
-      const timer = window.setTimeout(() => setDepositStatus("confirmed"), 6000);
-      return () => window.clearTimeout(timer);
+    if (depositStatus !== "pending") {
+      setDismissedDepositOverlay(false);
     }
-    setDismissedDepositOverlay(false);
-    return undefined;
   }, [depositStatus]);
 
   useEffect(() => {
@@ -406,15 +419,15 @@ const PartnerServicesView = () => {
 
     const now = new Date();
     const autoRef = manualDepositRef.trim() || `USSD${now.getTime().toString().slice(-6)}`;
-    setDepositReceipt({
-      id: `receipt-${now.getTime()}`,
+    setDepositReceipt((current) => ({
+      id: current?.id ?? `receipt-${now.getTime()}`,
       saccoId: selectedSacco,
       amount: depositAmount,
       status: "confirmed",
       ref: autoRef,
       pointsEarned: getDepositPoints(depositAmount),
       createdAt: now.toISOString(),
-    });
+    }));
   }, [depositAmount, depositStatus, manualDepositRef, selectedSacco]);
 
   const handleToggleAddon = (addonId: string) => {
@@ -426,17 +439,55 @@ const PartnerServicesView = () => {
     });
   };
 
-  const handleStartInsurancePayment = () => {
-    setInsuranceStatus("pending");
-    setShowInsuranceFallback(false);
-    setDismissedInsuranceOverlay(false);
-    launchUssdDialer(insuranceUssdCode, {
-      onFallback: () => setShowInsuranceFallback(true),
-    });
-    toast({
-      title: "USSD session started",
-      description: "Complete the steps on your phone to confirm the insurance payment.",
-    });
+  const handleStartInsurancePayment = async () => {
+    if (!insuranceTotal || insuranceTotal <= 0) {
+      toast({
+        title: "Missing premium",
+        description: "Add your moto details to calculate the premium before paying.",
+        variant: "destructive",
+      });
+      return;
+    }
+    const sanitizedPhone = (phoneNumber || fanProfile.phone).replace(/[^0-9+]/g, "");
+    try {
+      setInsuranceSaving(true);
+      const response = await jsonFetch<{
+        ok: boolean;
+        quote: { id: string; premium: number };
+      }>("/api/insurance/quote", {
+        method: "POST",
+        body: JSON.stringify({
+          moto_type: motoType,
+          plate: plateNumber || null,
+          period_months: coverageMonths,
+          premium: insuranceTotal,
+          user: {
+            name: fullName || fanProfile.name,
+            phone: sanitizedPhone,
+            momo_number: fanProfile.momo ?? sanitizedPhone,
+          },
+        }),
+      });
+      setInsuranceQuoteRecord(response.quote);
+      setInsuranceStatus("pending");
+      setShowInsuranceFallback(false);
+      setDismissedInsuranceOverlay(false);
+      launchUssdDialer(insuranceUssdCode, {
+        onFallback: () => setShowInsuranceFallback(true),
+      });
+      toast({
+        title: "USSD session started",
+        description: "Complete the steps on your phone to confirm the insurance payment.",
+      });
+    } catch (error) {
+      toast({
+        title: "Could not start payment",
+        description: error instanceof Error ? error.message : "Failed to create insurance quote.",
+        variant: "destructive",
+      });
+    } finally {
+      setInsuranceSaving(false);
+    }
   };
 
   const handleSubmitInsuranceReference = () => {
@@ -500,16 +551,53 @@ const PartnerServicesView = () => {
       });
       return;
     }
-    setDepositStatus("pending");
-    setShowDepositFallback(false);
-    setDismissedDepositOverlay(false);
-    launchUssdDialer(depositUssdCode, {
-      onFallback: () => setShowDepositFallback(true),
-    });
-    toast({
-      title: "Deposit in progress",
-      description: "Confirm the payment on your phone to grow your Ibimina savings.",
-    });
+    const sanitizedPhone = (phoneNumber || fanProfile.phone).replace(/[^0-9+]/g, "");
+    const saccoName = selectedSaccoDetails?.name ?? selectedSacco;
+    try {
+      setDepositSaving(true);
+      const response = await jsonFetch<{
+        ok: boolean;
+        deposit: { id: string; amount: number; status: "pending" | "confirmed"; ref: string | null; created_at: string };
+      }>("/api/sacco/deposit", {
+        method: "POST",
+        body: JSON.stringify({
+          sacco_name: saccoName,
+          amount: depositAmount,
+          user: {
+            name: fullName || fanProfile.name,
+            phone: sanitizedPhone,
+            momo_number: fanProfile.momo ?? sanitizedPhone,
+          },
+        }),
+      });
+      setDepositReceipt({
+        id: response.deposit.id,
+        saccoId: selectedSacco,
+        amount: response.deposit.amount,
+        status: response.deposit.status,
+        ref: response.deposit.ref ?? undefined,
+        pointsEarned: getDepositPoints(response.deposit.amount),
+        createdAt: response.deposit.created_at,
+      });
+      setDepositStatus(response.deposit.status);
+      setShowDepositFallback(false);
+      setDismissedDepositOverlay(false);
+      launchUssdDialer(depositUssdCode, {
+        onFallback: () => setShowDepositFallback(true),
+      });
+      toast({
+        title: "Deposit in progress",
+        description: "Confirm the payment on your phone to grow your Ibimina savings.",
+      });
+    } catch (error) {
+      toast({
+        title: "Could not start deposit",
+        description: error instanceof Error ? error.message : "Failed to register the deposit request.",
+        variant: "destructive",
+      });
+    } finally {
+      setDepositSaving(false);
+    }
   };
 
   const handleSubmitDepositReference = () => {
@@ -1015,16 +1103,31 @@ const PartnerServicesView = () => {
                   <p className="text-sm text-white/70">Complete the deposit using MTN or Airtel USSD.</p>
                 </div>
                 <div className="space-y-3">
-                  <Button className="w-full" variant="hero" onClick={handleStartDepositPayment}>
-                    <PhoneCall className="h-4 w-4" /> Dial {formatUssdDisplay(depositUssdCode)}
+                  <Button
+                    className="w-full"
+                    variant="hero"
+                    onClick={handleStartDepositPayment}
+                    disabled={depositSaving}
+                  >
+                    {depositSaving ? (
+                      <Loader2 className="h-4 w-4 animate-spin" />
+                    ) : (
+                      <PhoneCall className="h-4 w-4" />
+                    )}
+                    {depositSaving
+                      ? "Registering deposit…"
+                      : `Dial ${formatUssdDisplay(depositUssdCode)}`}
                   </Button>
                   <UssdNetworkTiles ussdCode={formatUssdDisplay(depositUssdCode)} />
-                  <DepositStatus status={depositStatus} />
+                  <DepositStatus status={depositStatus} reference={depositReceipt.ref} />
                   {showDepositFallback ? (
                     <div className="space-y-3">
                       <p className="text-sm text-white/70">
                         Enter the SMS reference if the payment is pending so our SACCO partners can reconcile it.
                       </p>
+                      {depositReceipt.ref ? (
+                        <p className="text-xs text-white/50">Current ref: {depositReceipt.ref}</p>
+                      ) : null}
                       <div className="flex flex-col gap-2 sm:flex-row">
                         <Input
                           placeholder="Reference"
diff --git a/supabase/functions/sms-webhook/index.ts b/supabase/functions/sms-webhook/index.ts
index f9619f4..917b6b7 100644
--- a/supabase/functions/sms-webhook/index.ts
+++ b/supabase/functions/sms-webhook/index.ts
@@ -1,82 +1,60 @@
-// Route: POST /sms/webhook
-// Header: Authorization: Bearer ${SMS_WEBHOOK_TOKEN}
-// Body: { from_msisdn: string, text: string, received_at?: string }
+// deno-lint-ignore-file no-explicit-any
 import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
 import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
-
-const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
-const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
 const TOKEN = Deno.env.get("SMS_WEBHOOK_TOKEN")!;
+const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
+const SERVICE = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
+const db = createClient(SUPABASE_URL, SERVICE);
 
 serve(async (req) => {
-  if (req.method !== "POST") {
-    return new Response("Method Not Allowed", { status: 405 });
-  }
-
-  const authHeader = req.headers.get("authorization") ?? "";
-  const bearer = authHeader.startsWith("Bearer ") ? authHeader.slice(7).trim() : null;
-  if (!bearer || bearer !== TOKEN) {
-    return new Response("Unauthorized", { status: 401 });
-  }
-
-  let payload: Record<string, unknown>;
-  try {
-    payload = await req.json();
-  } catch {
-    return new Response(JSON.stringify({ error: "invalid_json" }), {
-      status: 400,
-      headers: { "Content-Type": "application/json" },
-    });
-  }
-
-  const { from_msisdn, text, received_at } = payload as {
-    from_msisdn?: string;
-    text?: string;
-    received_at?: string;
-  };
-  if (!from_msisdn || !text) {
-    return new Response(JSON.stringify({ error: "missing_fields" }), {
-      status: 400,
-      headers: { "Content-Type": "application/json" },
-    });
-  }
-
-  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
-  const { data, error } = await supabase
-    .from("sms_raw")
-    .insert({
-      from_msisdn,
-      text,
-      received_at: received_at ?? new Date().toISOString(),
-      source: "gsm-daemon",
-    })
-    .select()
-    .single();
-
-  if (error) {
-    return new Response(JSON.stringify({ error: error.message }), {
-      status: 500,
-      headers: { "Content-Type": "application/json" },
-    });
-  }
-
-  const url = new URL(req.url);
-  url.pathname = "/functions/v1/parse-sms";
-
-  let parsed: unknown = null;
-  try {
-    const fanoutResp = await fetch(url.toString(), {
-      method: "POST",
-      headers: { "Content-Type": "application/json" },
-      body: JSON.stringify({ sms_id: data.id }),
-    });
-    parsed = await fanoutResp.json().catch(() => null);
-  } catch (err) {
-    parsed = { error: (err as Error).message };
+  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });
+  const auth = req.headers.get("authorization")?.split("Bearer ")[1];
+  if (!auth || auth !== TOKEN) return new Response("Unauthorized", { status: 401 });
+
+  const payload = await req.json(); // { from, text } e.g. "Paid RWF 25000 Ref XYZ123 ..."
+  const txt = String(payload?.text ?? "");
+  const refMatch = txt.match(/Ref\s+([A-Z0-9\-]+)/i);
+  const amtMatch = txt.match(/RWF\s*([\d,]+)/i);
+  const REF = refMatch?.[1] ?? crypto.randomUUID();
+  const AMT = amtMatch ? Number(amtMatch[1].replace(/,/g, "")) : 0;
+
+  // Try to match pending ticket/order/quote/deposit by amount or placeholder ref
+  // For MVP we only flip earliest pending with same total.
+  async function matchAndConfirm() {
+    // tickets
+    let { data: t } = await db.from("tickets").select("*").eq("paid", false).order("created_at").limit(50);
+    const ticket = (t ?? []).find((x: any) => x.price === AMT);
+    if (ticket) {
+      await db.from("tickets").update({ paid: true, momo_ref: REF }).eq("id", ticket.id);
+      await db.from("transactions").insert({ user_id: ticket.user_id, kind: "purchase", amount: AMT, ref: REF });
+      return { kind: "ticket", id: ticket.id };
+    }
+    // orders
+    let { data: o } = await db.from("orders").select("*").eq("status", "pending").order("created_at").limit(50);
+    const order = (o ?? []).find((x: any) => x.total === AMT);
+    if (order) {
+      await db.from("orders").update({ status: "paid", momo_ref: REF }).eq("id", order.id);
+      await db.from("transactions").insert({ user_id: order.user_id, kind: "purchase", amount: AMT, ref: REF });
+      return { kind: "order", id: order.id };
+    }
+    // insurance
+    let { data: q } = await db.from("insurance_quotes").select("*").eq("status", "quoted").order("created_at").limit(50);
+    const quote = (q ?? []).find((x: any) => x.premium === AMT);
+    if (quote) {
+      await db.from("insurance_quotes").update({ status: "paid", ref: REF }).eq("id", quote.id);
+      return { kind: "quote", id: quote.id };
+    }
+    // sacco
+    let { data: d } = await db.from("sacco_deposits").select("*").eq("status", "pending").order("created_at").limit(50);
+    const dep = (d ?? []).find((x: any) => x.amount === AMT);
+    if (dep) {
+      await db.from("sacco_deposits").update({ status: "confirmed", ref: REF }).eq("id", dep.id);
+      await db.from("transactions").insert({ user_id: dep.user_id, kind: "deposit", amount: AMT, ref: REF });
+      return { kind: "deposit", id: dep.id };
+    }
+    return { kind: "unmatched" };
   }
 
-  return new Response(JSON.stringify({ ok: true, sms_id: data.id, parsed }), {
-    status: 200,
-    headers: { "Content-Type": "application/json" },
-  });
+  const result = await matchAndConfirm();
+  return new Response(JSON.stringify({ ok: true, parsed: { REF, AMT }, result }), { status: 200 });
 });
diff --git a/supabase/migrations/20251013_mvp_schema.sql b/supabase/migrations/20251013_mvp_schema.sql
new file mode 100644
index 0000000..153503a
--- /dev/null
+++ b/supabase/migrations/20251013_mvp_schema.sql
@@ -0,0 +1,124 @@
+-- USERS
+create table if not exists public.users (
+  id uuid primary key default gen_random_uuid(),
+  name text,
+  phone text unique,
+  momo_number text,
+  avatar_url text,
+  tier text check (tier in ('guest','fan','gold')) default 'guest',
+  points int default 0,
+  created_at timestamptz default now()
+);
+
+-- MATCHES & TICKETS
+create table if not exists public.matches (
+  id uuid primary key default gen_random_uuid(),
+  title text not null,
+  comp text,
+  date timestamptz not null,
+  venue text,
+  status text check (status in ('upcoming','live','ft')) default 'upcoming',
+  home_team text, away_team text,
+  vip_price int, regular_price int,
+  seats_vip int default 0, seats_regular int default 0
+);
+
+create table if not exists public.tickets (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid references public.users(id) on delete set null,
+  match_id uuid references public.matches(id) on delete cascade,
+  zone text check (zone in ('VIP','Regular','Blue')) not null,
+  price int not null,
+  paid boolean default false,
+  momo_ref text,
+  created_at timestamptz default now()
+);
+
+-- WALLET & TRANSACTIONS
+create table if not exists public.wallets (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid unique references public.users(id) on delete cascade,
+  balance int default 0,
+  updated_at timestamptz default now()
+);
+
+create table if not exists public.transactions (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid references public.users(id) on delete set null,
+  kind text check (kind in ('deposit','purchase','refund','reward')),
+  amount int not null,
+  ref text,
+  created_at timestamptz default now()
+);
+
+-- SHOP
+create table if not exists public.shop_products (
+  id uuid primary key default gen_random_uuid(),
+  name text, category text, price int, stock int,
+  description text, image_url text, badge text
+);
+
+create table if not exists public.orders (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid references public.users(id) on delete set null,
+  total int not null,
+  momo_ref text,
+  status text check (status in ('pending','paid','ready','pickedup')) default 'pending',
+  created_at timestamptz default now()
+);
+
+create table if not exists public.order_items (
+  id uuid primary key default gen_random_uuid(),
+  order_id uuid references public.orders(id) on delete cascade,
+  product_id uuid references public.shop_products(id) on delete restrict,
+  qty int not null,
+  price int not null
+);
+
+-- SACCO DEPOSITS
+create table if not exists public.sacco_deposits (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid references public.users(id) on delete set null,
+  sacco_name text,
+  amount int not null,
+  ref text,
+  status text check (status in ('pending','confirmed')) default 'pending',
+  created_at timestamptz default now()
+);
+
+-- INSURANCE
+create table if not exists public.insurance_quotes (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid references public.users(id) on delete set null,
+  moto_type text, plate text, period_months int,
+  premium int, ticket_perk boolean default false,
+  status text check (status in ('quoted','paid','issued')) default 'quoted',
+  ref text,
+  created_at timestamptz default now()
+);
+
+create table if not exists public.policies (
+  id uuid primary key default gen_random_uuid(),
+  quote_id uuid references public.insurance_quotes(id) on delete cascade,
+  number text,
+  valid_from timestamptz, valid_to timestamptz,
+  free_ticket_issued boolean default false
+);
+
+-- COMMUNITY
+create table if not exists public.fan_posts (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid references public.users(id) on delete set null,
+  text text, media_url text,
+  likes int default 0, comments int default 0,
+  created_at timestamptz default now()
+);
+
+-- RLS sane defaults (read-only for public lists)
+alter table public.matches enable row level security;
+create policy p_matches_read on public.matches for select using (true);
+
+alter table public.shop_products enable row level security;
+create policy p_products_read on public.shop_products for select using (true);
+
+-- other tables will be accessed server-side via service role in API routes
diff --git a/supabase/seed/20251013_seed.sql b/supabase/seed/20251013_seed.sql
new file mode 100644
index 0000000..8231755
--- /dev/null
+++ b/supabase/seed/20251013_seed.sql
@@ -0,0 +1,14 @@
+insert into public.users (name, phone, momo_number, tier, points)
+values ('Guest Fan', '0780000000', '0780000000', 'fan', 1200)
+on conflict do nothing;
+
+insert into public.matches (title, comp, date, venue, status, home_team, away_team, vip_price, regular_price, seats_vip, seats_regular)
+values
+('Rayon vs APR', 'Rwanda Premier League', now() + interval '3 day', 'Amahoro', 'upcoming', 'Rayon', 'APR', 15000, 5000, 420, 3510),
+('Rayon vs Police', 'Rwanda Premier League', now() + interval '10 day', 'Kigali', 'upcoming', 'Rayon', 'Police', 15000, 5000, 420, 3510);
+
+insert into public.shop_products (name, category, price, stock, description, image_url, badge)
+values
+('Home Jersey 24/25', 'jerseys', 25000, 25, 'Official home kit', '/shop/home1.png', 'official'),
+('Away Jersey 24/25', 'jerseys', 25000, 18, 'Official away kit', '/shop/away1.png', 'official'),
+('Scarf Classic', 'accessories', 10000, 40, 'Warm knit scarf', '/shop/scarf1.png', 'sale');
