generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

enum InsuranceStatus {
  quoted
  paid
  issued
  @@map("insurance_status")
}

enum MatchStatus {
  upcoming
  live
  ft
  @@map("match_status")
}

enum OrderStatus {
  pending
  paid
  ready
  pickedup
  @@map("order_status")
}

enum PaymentKind {
  ticket
  shop
  deposit
  policy
  @@map("payment_kind")
}

enum PaymentStatus {
  pending
  confirmed
  failed
  @@map("payment_status")
}

enum SaccoStatus {
  pending
  confirmed
  @@map("sacco_status")
}

enum TicketOrderStatus {
  pending
  paid
  cancelled
  expired
  @@map("ticket_order_status")
}

enum TicketPassState {
  active
  used
  refunded
  @@map("ticket_pass_state")
}

enum TicketZone {
  VIP
  Regular
  Blue
  @@map("ticket_zone")
}

enum TransactionStatus {
  pending
  confirmed
  failed
  manual_review
  @@map("transaction_status")
}

enum TransactionType {
  deposit
  purchase
  refund
  reward
  @@map("transaction_type")
}

enum UserTier {
  guest
  fan
  gold
  @@map("user_tier")
}

model AdminRole {
  id String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String              @unique
  adminUsersRoles AdminUsersRole[]
  rolesPermissions RolesPermission[]
  @@map("admin_roles")
}

model AdminSession {
  id String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminUserId String      @db.Uuid @map("admin_user_id")
  tokenHash String      @unique @map("token_hash")
  createdAt DateTime    @default(now()) @db.Timestamptz(6) @map("created_at")
  expiresAt DateTime?   @db.Timestamptz(6) @map("expires_at")
  revoked Boolean     @default(false)
  lastSeenAt DateTime?   @default(now()) @db.Timestamptz(6) @map("last_seen_at")
  adminUser AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("admin_sessions")
}

model AdminUser {
  id String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String              @unique
  passwordHash String @map("password_hash")
  displayName String? @map("display_name")
  status String?             @default("active")
  lastLogin DateTime?           @db.Timestamptz(6) @map("last_login")
  adminSessions AdminSession[]
  adminUsersRoles AdminUsersRole[]
  auditLogs AuditLog[]
  featureFlags FeatureFlag[]
  translations Translation[]
  @@map("admin_users")
}

model AdminUsersRole {
  adminUserId String      @db.Uuid @map("admin_user_id")
  roleId String      @db.Uuid @map("role_id")
  adminUser AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  adminRole AdminRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@id([adminUserId, roleId])
  @@map("admin_users_roles")
}

model AuditLog {
  id String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  at DateTime?    @default(now()) @db.Timestamptz(6)
  adminUserId String?      @db.Uuid @map("admin_user_id")
  action String?
  entityType String? @map("entity_type")
  entityId String? @map("entity_id")
  before Json?
  after Json?
  ip String?
  ua String?
  adminUser AdminUser? @relation(fields: [adminUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("audit_logs")
}

model CommunityPost {
  id String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?             @db.Uuid @map("user_id")
  text String?
  mediaUrl String? @map("media_url")
  status String?             @default("visible")
  createdAt DateTime?           @default(now()) @db.Timestamptz(6) @map("created_at")
  user User?              @relation(fields: [userId], references: [id], onUpdate: NoAction)
  communityReports CommunityReport[]
  @@map("community_posts")
}

model CommunityReport {
  id String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId String?          @db.Uuid @map("post_id")
  reason String?
  createdAt DateTime?        @default(now()) @db.Timestamptz(6) @map("created_at")
  communityPost CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("community_reports")
}

model ContentItem {
  id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kind String
  title String
  slug String?   @unique
  summary String?
  body String?
  mediaUrl String? @map("media_url")
  tags String[]  @default([])
  publishedAt DateTime? @db.Timestamptz(6) @map("published_at")
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  @@map("content_items")
}

model FanClub {
  id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  city String?
  members Int     @default(0)
  @@map("fan_clubs")
}

model FanPost {
  id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?  @db.Uuid @map("user_id")
  text String?
  mediaUrl String? @map("media_url")
  likes Int      @default(0)
  comments Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  user User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("fan_posts")
}

model FeatureFlag {
  key String       @id
  value Json?
  updatedBy String?      @db.Uuid @map("updated_by")
  updatedAt DateTime     @default(now()) @db.Timestamptz(6) @map("updated_at")
  adminUser AdminUser? @relation(fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("feature_flags")
}

model FundDonation {
  id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String? @db.Uuid @map("user_id")
  amount Int?
  status String? @default("pending")
  @@map("fund_donations")
}

model FundProject {
  id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String?
  goal Int?
  progress Int?    @default(0)
  @@map("fund_projects")
}

model GamificationEvent {
  id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?   @db.Uuid @map("user_id")
  kind String?
  value Int?
  context Json?
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  @@map("gamification_events")
}

model InsuranceQuote {
  id String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?          @db.Uuid @map("user_id")
  motoType String? @map("moto_type")
  plate String?
  premium Int
  ticketPerk Boolean          @default(false) @map("ticket_perk")
  status InsuranceStatus @default(quoted)
  ref String?
  createdAt DateTime         @default(now()) @db.Timestamptz(6) @map("created_at")
  user User?           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  policies Policy[]
  @@map("insurance_quotes")
}

model Leaderboard {
  period String
  userId String @db.Uuid @map("user_id")
  points Int?
  @@id([period, userId])
  @@map("leaderboards")
}

model MatchGate {
  id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  matchId String   @db.Uuid @map("match_id")
  name String
  location String?
  maxThroughput Int? @map("max_throughput")
  createdAt DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  match Match  @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("match_gates")
}

model MatchZone {
  id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  matchId String   @db.Uuid @map("match_id")
  name String
  capacity Int      @default(0)
  price Int      @default(0)
  defaultGate String? @map("default_gate")
  createdAt DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  match Match  @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("match_zones")
}

model Match {
  id String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kickoff DateTime         @db.Timestamptz(6)
  venue String?
  status MatchStatus     @default(upcoming)
  vipPrice Int? @map("vip_price")
  regularPrice Int? @map("regular_price")
  seatsVip Int? @map("seats_vip")
  seatsRegular Int? @map("seats_regular")
  bluePrice Int? @map("blue_price")
  seatsBlue Int? @map("seats_blue")
  opponent String?
  matchGates MatchGate[]
  matchZones MatchZone[]
  tickets Ticket[]
  ticketsLegacy TicketsLegacy[]
  @@map("matches")
}

model MembershipPlan {
  id String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String?
  price Int?
  perks Json?         @default("[]")
  memberships Membership[]
  @@map("membership_plans")
}

model Membership {
  id String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?           @db.Uuid @map("user_id")
  planId String?           @db.Uuid @map("plan_id")
  status String?           @default("pending")
  startedAt DateTime?         @db.Timestamptz(6) @map("started_at")
  expiresAt DateTime?         @db.Timestamptz(6) @map("expires_at")
  membershipPlan MembershipPlan? @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@map("memberships")
}

model OrderItem {
  id String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId String?        @db.Uuid @map("order_id")
  productId String?        @db.Uuid @map("product_id")
  qty Int
  price Int
  order Order?        @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shopProduct ShopProduct? @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  @@map("order_items")
}

model Order {
  id String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?       @db.Uuid @map("user_id")
  total Int
  momoRef String? @map("momo_ref")
  status OrderStatus  @default(pending)
  createdAt DateTime      @default(now()) @db.Timestamptz(6) @map("created_at")
  orderItems OrderItem[]
  user User?        @relation(fields: [userId], references: [id], onUpdate: NoAction)
  payments Payment[]
  @@index([createdAt(sort: Desc)], map: "idx_orders_created")
  @@index([status], map: "idx_orders_status")
  @@map("orders")
}

model Partner {
  id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  category String?
  url String?
  logoUrl String? @map("logo_url")
  slug String
  active Boolean  @default(true)
  metadata Json?    @default("{}")
  createdAt DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  updatedAt DateTime @default(now()) @db.Timestamptz(6) @map("updated_at")
  @@map("partners")
}

model Payment {
  id String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kind PaymentKind
  amount Int
  status PaymentStatus? @default(pending)
  smsParsedId String?         @db.Uuid @map("sms_parsed_id")
  orderId String?         @db.Uuid @map("order_id")
  membershipId String?         @db.Uuid @map("membership_id")
  donationId String?         @db.Uuid @map("donation_id")
  createdAt DateTime?       @default(now()) @db.Timestamptz(6) @map("created_at")
  ticketOrderId String?         @db.Uuid @map("ticket_order_id")
  metadata Json?           @default("{}")
  order Order?         @relation(fields: [orderId], references: [id], onUpdate: NoAction)
  smsParsed SmsParsed?     @relation(fields: [smsParsedId], references: [id], onUpdate: NoAction)
  ticketOrder TicketOrder?  @relation(fields: [ticketOrderId], references: [id], onUpdate: NoAction)
  @@index([kind], map: "idx_payments_kind")
  @@map("payments")
}

model Permission {
  id String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key String              @unique
  description String?
  rolesPermissions RolesPermission[]
  @@map("permissions")
}

model Policy {
  id String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quoteId String?           @db.Uuid @map("quote_id")
  number String
  validFrom DateTime          @db.Timestamptz(6) @map("valid_from")
  validTo DateTime          @db.Timestamptz(6) @map("valid_to")
  freeTicketIssued Boolean           @default(false) @map("free_ticket_issued")
  insuranceQuote InsuranceQuote? @relation(fields: [quoteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("policies")
}

model Poll {
  id String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  options Json
  results Json    @default("{}")
  active Boolean @default(true)
  @@map("polls")
}

model Product {
  id String  @id(map: "products_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String?
  price Int?
  stock Int?    @default(0)
  images Json?   @default("[]")
  @@map("products")
}

model ProductsLegacy {
  id String  @id(map: "products_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String?
  price Int?
  stock Int?    @default(0)
  images Json?   @default("[]")
  @@map("products_legacy")
}

model RewardsEvent {
  id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?   @db.Uuid @map("user_id")
  source String
  refId String?   @db.Uuid @map("ref_id")
  points Int
  meta Json?
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  user User?    @relation(fields: [userId], references: [id], onUpdate: NoAction)
  @@map("rewards_events")
}

model RolesPermission {
  roleId String      @db.Uuid @map("role_id")
  permissionId String      @db.Uuid @map("permission_id")
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  adminRole AdminRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@id([roleId, permissionId])
  @@map("roles_permissions")
}

model SaccoDeposit {
  id String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?      @db.Uuid @map("user_id")
  saccoName String @map("sacco_name")
  amount Int
  ref String?
  status SaccoStatus @default(pending)
  createdAt DateTime     @default(now()) @db.Timestamptz(6) @map("created_at")
  user User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("sacco_deposits")
}

model ShopProduct {
  id String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  category String?
  price Int
  stock Int           @default(0)
  description String?
  imageUrl String? @map("image_url")
  badge String?
  images Json?         @default("[]")
  orderItems OrderItem[]
  @@index([category], map: "idx_shop_products_category")
  @@map("shop_products")
}

model ShopPromotion {
  id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String
  description String?
  discountPct Decimal?  @db.Decimal @map("discount_pct")
  productIds String[]  @default([]) @db.Uuid @map("product_ids")
  startsAt DateTime  @db.Timestamptz(6) @map("starts_at")
  endsAt DateTime  @db.Timestamptz(6) @map("ends_at")
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  @@index([startsAt, endsAt], map: "idx_promotions_active")
  @@map("shop_promotions")
}

model SmsParsed {
  id String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  smsId String?    @db.Uuid @map("sms_id")
  amount Int
  currency String?    @default("RWF")
  payerMask String? @map("payer_mask")
  ref String?
  matchedEntity String? @map("matched_entity")
  confidence Decimal?   @db.Decimal
  createdAt DateTime?  @default(now()) @db.Timestamptz(6) @map("created_at")
  payments Payment[]
  smsRaw SmsRaw?   @relation(fields: [smsId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@index([amount], map: "idx_sms_parsed_amount")
  @@map("sms_parsed")
}

model SmsRaw {
  id String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  receivedAt DateTime?    @default(now()) @db.Timestamptz(6) @map("received_at")
  fromMsisdn String? @map("from_msisdn")
  text String
  source String?      @default("gsm-daemon")
  smsParsed SmsParsed[]
  @@index([receivedAt(sort: Desc)], map: "idx_sms_raw_received")
  @@map("sms_raw")
}

model TicketOrderItem {
  id String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId String?        @db.Uuid @map("order_id")
  zone TicketZone
  quantity Int
  price Int
  ticketOrder TicketOrder? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("ticket_order_items")
}

model TicketOrder {
  id String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?              @db.Uuid @map("user_id")
  matchId String?              @db.Uuid @map("match_id")
  total Int
  status TicketOrderStatus? @default(pending)
  ussdCode String? @map("ussd_code")
  smsRef String? @map("sms_ref")
  createdAt DateTime?            @default(now()) @db.Timestamptz(6) @map("created_at")
  expiresAt DateTime?            @db.Timestamptz(6) @map("expires_at")
  payments Payment[]
  ticketOrderItems TicketOrderItem[]
  ticketPasses TicketPass[]
  ticketsLegacy TicketsLegacy[]
  @@index([matchId], map: "idx_ticket_orders_match")
  @@map("ticket_orders")
}

model TicketPass {
  id String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId String?        @db.Uuid @map("order_id")
  zone String?
  gate String?
  qrTokenHash String? @map("qr_token_hash")
  state String?        @default("active")
  createdAt DateTime?      @default(now()) @db.Timestamptz(6) @map("created_at")
  ticketOrder TicketOrder? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@index([orderId], map: "idx_ticket_passes_order")
  @@map("ticket_passes")
}

model Ticket {
  id String    @id(map: "tickets_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?   @db.Uuid @map("user_id")
  matchId String?   @db.Uuid @map("match_id")
  zone String
  price Int
  paid Boolean?  @default(false)
  momoRef String? @map("momo_ref")
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  match Match?  @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tickets_match_id_fkey1")
  user User?    @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "tickets_user_id_fkey1")
  @@map("tickets")
}

model TicketsLegacy {
  id String         @id(map: "tickets_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?        @db.Uuid @map("user_id")
  matchId String?        @db.Uuid @map("match_id")
  zone TicketZone
  price Int
  paid Boolean        @default(false)
  momoRef String? @map("momo_ref")
  createdAt DateTime       @default(now()) @db.Timestamptz(6) @map("created_at")
  orderId String?        @db.Uuid @map("order_id")
  gate String?
  state String         @default("pending")
  qrToken String? @map("qr_token")
  updatedAt DateTime       @default(now()) @db.Timestamptz(6) @map("updated_at")
  match Match?       @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tickets_match_id_fkey")
  ticketOrder TicketOrder? @relation(fields: [orderId], references: [id], onUpdate: NoAction, map: "tickets_order_id_fkey")
  user User?         @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "tickets_user_id_fkey")
  @@map("tickets_legacy")
}

model Transaction {
  id String    @id(map: "transactions_pkey1") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?   @db.Uuid @map("user_id")
  kind String?
  amount Int
  ref String?
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  user User?    @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "transactions_user_id_fkey1")
  @@map("transactions")
}

model TransactionsLegacy {
  id String             @id(map: "transactions_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?            @db.Uuid @map("user_id")
  type TransactionType
  amount Int
  ref String?
  createdAt DateTime           @default(now()) @db.Timestamptz(6) @map("created_at")
  status TransactionStatus @default(pending)
  user User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_user_id_fkey")
  @@map("transactions_legacy")
}

model Translation {
  lang String
  key String
  value String
  updatedBy String?      @db.Uuid @map("updated_by")
  updatedAt DateTime     @default(now()) @db.Timestamptz(6) @map("updated_at")
  adminUser AdminUser? @relation(fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@id([lang, key])
  @@map("translations")
}

model UserFavorite {
  id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?   @db.Uuid @map("user_id")
  entityType String @map("entity_type")
  entityId String @map("entity_id")
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  user User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("user_favorites")
}

model UserPref {
  userId String    @id @db.Uuid @map("user_id")
  language String?   @default("rw")
  notifications Json?     @default("{\"club\": true, \"final\": true, \"goals\": true, \"kickoff\": true}")
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("user_prefs")
}

model User {
  id String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String?
  phone String?               @unique
  momoNumber String? @map("momo_number")
  avatarUrl String? @map("avatar_url")
  tier UserTier             @default(guest)
  points Int                   @default(0)
  createdAt DateTime              @default(now()) @db.Timestamptz(6) @map("created_at")
  displayName String? @map("display_name")
  region String?
  fanClub String? @map("fan_club")
  publicProfile Boolean?              @default(false) @map("public_profile")
  language String?               @default("rw")
  joinedAt DateTime?             @default(now()) @db.Timestamptz(6) @map("joined_at")
  userCode String? @map("user_code")
  communityPosts CommunityPost[]
  fanPosts FanPost[]
  insuranceQuotes InsuranceQuote[]
  orders Order[]
  rewardsEvents RewardsEvent[]
  saccoDeposits SaccoDeposit[]
  tickets Ticket[]
  ticketsLegacy TicketsLegacy[]
  transactions Transaction[]
  transactionsLegacy TransactionsLegacy[]
  userFavorites UserFavorite[]
  userPref UserPref?
  wallet Wallet?
  walletLegacy WalletLegacy?
  @@map("users")
}

model Wallet {
  id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?  @unique @db.Uuid @map("user_id")
  balance Int      @default(0)
  updatedAt DateTime @default(now()) @db.Timestamptz(6) @map("updated_at")
  user User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("wallet")
}

model WalletLegacy {
  id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String?   @unique @db.Uuid @map("user_id")
  balance Int?      @default(0)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6) @map("updated_at")
  user User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@map("wallets")
}
